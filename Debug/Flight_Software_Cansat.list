
Flight_Software_Cansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004ff8  08004ff8  00005ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800507c  0800507c  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800508c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000224  24000088  08005114  00007088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002ac  08005114  000072ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f589  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ffe  00000000  00000000  0001663f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b68  00000000  00000000  00018640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ae  00000000  00000000  000191a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032be8  00000000  00000000  00019a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e9f9  00000000  00000000  0004c63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001433f0  00000000  00000000  0005b037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019e427  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035a8  00000000  00000000  0019e46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001a1a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000088 	.word	0x24000088
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08004fe0 	.word	0x08004fe0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400008c 	.word	0x2400008c
 800030c:	08004fe0 	.word	0x08004fe0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e0:	f000 f8ea 	bl	80008b8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f000 fd22 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f84c 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 f8ba 	bl	8000864 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 faef 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 faec 	bl	8000cd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 fae9 	bl	8000cd4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000702:	2101      	movs	r1, #1
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fbaf 	bl	8000e68 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800070a:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <main+0x9c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000712:	4b19      	ldr	r3, [pc, #100]	@ (8000778 <main+0x9c>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <main+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800071e:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <main+0x9c>)
 8000720:	2200      	movs	r2, #0
 8000722:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000724:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <main+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800072a:	4913      	ldr	r1, [pc, #76]	@ (8000778 <main+0x9c>)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fc1f 	bl	8000f70 <BSP_COM_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <main+0x60>
  {
    Error_Handler();
 8000738:	f000 f8fe 	bl	8000938 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 800073c:	480f      	ldr	r0, [pc, #60]	@ (800077c <main+0xa0>)
 800073e:	f003 fde3 	bl	8004308 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fb3c 	bl	8000dc0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fb39 	bl	8000dc0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800074e:	2002      	movs	r0, #2
 8000750:	f000 fb36 	bl	8000dc0 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <main+0xa4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d1fb      	bne.n	8000754 <main+0x78>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <main+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 fb56 	bl	8000e14 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fb53 	bl	8000e14 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 800076e:	2002      	movs	r0, #2
 8000770:	f000 fb50 	bl	8000e14 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000774:	e7ee      	b.n	8000754 <main+0x78>
 8000776:	bf00      	nop
 8000778:	240000a4 	.word	0x240000a4
 800077c:	08004ff8 	.word	0x08004ff8
 8000780:	240000b4 	.word	0x240000b4

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	@ 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	224c      	movs	r2, #76	@ 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fe0d 	bl	80043b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fe07 	bl	80043b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f001 f91b 	bl	80019e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <SystemClock_Config+0xdc>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000860 <SystemClock_Config+0xdc>)
 80007b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <SystemClock_Config+0xdc>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ca:	bf00      	nop
 80007cc:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <SystemClock_Config+0xdc>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d8:	d1f8      	bne.n	80007cc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007da:	2302      	movs	r3, #2
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007de:	2301      	movs	r3, #1
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80007e2:	2340      	movs	r3, #64	@ 0x40
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2300      	movs	r3, #0
 80007ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80007f2:	230c      	movs	r3, #12
 80007f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000802:	230c      	movs	r3, #12
 8000804:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000806:	2300      	movs	r3, #0
 8000808:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f91e 	bl	8001a54 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800081e:	f000 f88b 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	233f      	movs	r3, #63	@ 0x3f
 8000824:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2303      	movs	r3, #3
 8000828:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800082e:	2308      	movs	r3, #8
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000836:	2340      	movs	r3, #64	@ 0x40
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800083a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000840:	2340      	movs	r3, #64	@ 0x40
 8000842:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2101      	movs	r1, #1
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fcdd 	bl	8002208 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000854:	f000 f870 	bl	8000938 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3770      	adds	r7, #112	@ 0x70
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024800 	.word	0x58024800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_GPIO_Init+0x50>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <MX_GPIO_Init+0x50>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_GPIO_Init+0x50>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_GPIO_Init+0x50>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088e:	4a09      	ldr	r2, [pc, #36]	@ (80008b4 <MX_GPIO_Init+0x50>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_GPIO_Init+0x50>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	58024400 	.word	0x58024400

080008b8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008ca:	f000 fdd1 	bl	8001470 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ce:	2301      	movs	r3, #1
 80008d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008da:	231f      	movs	r3, #31
 80008dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008de:	2387      	movs	r3, #135	@ 0x87
 80008e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e6:	2300      	movs	r3, #0
 80008e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ee:	2301      	movs	r3, #1
 80008f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fdef 	bl	80014e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000902:	2004      	movs	r0, #4
 8000904:	f000 fdcc 	bl	80014a0 <HAL_MPU_Enable>

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <BSP_PB_Callback+0x24>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	240000b4 	.word	0x240000b4

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_MspInit+0x30>)
 800094c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000950:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x30>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	58024400 	.word	0x58024400

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 fc1f 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fab6 	bl	8000f4c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e00a      	b.n	8000a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f6:	f3af 8000 	nop.w
 80009fa:	4601      	mov	r1, r0
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	b2ca      	uxtb	r2, r1
 8000a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf0      	blt.n	80009f6 <_read+0x12>
  }

  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e009      	b.n	8000a44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fafb 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	3301      	adds	r3, #1
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697a      	ldr	r2, [r7, #20]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	dbf1      	blt.n	8000a30 <_write+0x12>
  }
  return len;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <_close>:

int _close(int file)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f003 fcae 	bl	8004450 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	24050000 	.word	0x24050000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	240000b8 	.word	0x240000b8
 8000b28:	240002b0 	.word	0x240002b0

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b30:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <SystemInit+0x100>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a3d      	ldr	r2, [pc, #244]	@ (8000c2c <SystemInit+0x100>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b40:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <SystemInit+0x104>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d807      	bhi.n	8000b5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b4c:	4b38      	ldr	r3, [pc, #224]	@ (8000c30 <SystemInit+0x104>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f023 030f 	bic.w	r3, r3, #15
 8000b54:	4a36      	ldr	r2, [pc, #216]	@ (8000c30 <SystemInit+0x104>)
 8000b56:	f043 0307 	orr.w	r3, r3, #7
 8000b5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b5c:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <SystemInit+0x108>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a34      	ldr	r2, [pc, #208]	@ (8000c34 <SystemInit+0x108>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b68:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <SystemInit+0x108>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <SystemInit+0x108>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4930      	ldr	r1, [pc, #192]	@ (8000c34 <SystemInit+0x108>)
 8000b74:	4b30      	ldr	r3, [pc, #192]	@ (8000c38 <SystemInit+0x10c>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <SystemInit+0x104>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <SystemInit+0x104>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f023 030f 	bic.w	r3, r3, #15
 8000b8e:	4a28      	ldr	r2, [pc, #160]	@ (8000c30 <SystemInit+0x104>)
 8000b90:	f043 0307 	orr.w	r3, r3, #7
 8000b94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b96:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <SystemInit+0x108>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <SystemInit+0x108>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <SystemInit+0x108>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <SystemInit+0x108>)
 8000baa:	4a24      	ldr	r2, [pc, #144]	@ (8000c3c <SystemInit+0x110>)
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <SystemInit+0x108>)
 8000bb0:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <SystemInit+0x114>)
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <SystemInit+0x108>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <SystemInit+0x118>)
 8000bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <SystemInit+0x108>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <SystemInit+0x108>)
 8000bc2:	4a20      	ldr	r2, [pc, #128]	@ (8000c44 <SystemInit+0x118>)
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <SystemInit+0x108>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <SystemInit+0x108>)
 8000bce:	4a1d      	ldr	r2, [pc, #116]	@ (8000c44 <SystemInit+0x118>)
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <SystemInit+0x108>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <SystemInit+0x108>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <SystemInit+0x108>)
 8000bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <SystemInit+0x108>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000bea:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <SystemInit+0x108>)
 8000bec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d113      	bne.n	8000c20 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <SystemInit+0x108>)
 8000bfa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <SystemInit+0x108>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c04:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <SystemInit+0x11c>)
 8000c0a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <SystemInit+0x108>)
 8000c12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c16:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <SystemInit+0x108>)
 8000c18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00
 8000c30:	52002000 	.word	0x52002000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c3c:	02020200 	.word	0x02020200
 8000c40:	01ff0000 	.word	0x01ff0000
 8000c44:	01010280 	.word	0x01010280
 8000c48:	52004000 	.word	0x52004000

08000c4c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c5c:	bf00      	nop
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <ExitRun0Mode+0x2c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f9      	beq.n	8000c5e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	58024800 	.word	0x58024800

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cb8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c80:	f7ff ffe4 	bl	8000c4c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff ff52 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f003 fbd5 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fd13 	bl	80006dc <main>
  bx  lr
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000cbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cc0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000cc4:	0800508c 	.word	0x0800508c
  ldr r2, =_sbss
 8000cc8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000ccc:	240002ac 	.word	0x240002ac

08000cd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC3_IRQHandler>
	...

08000cd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	@ 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d009      	beq.n	8000cfc <BSP_LED_Init+0x28>
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d006      	beq.n	8000cfc <BSP_LED_Init+0x28>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d003      	beq.n	8000cfc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cf4:	f06f 0301 	mvn.w	r3, #1
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cfa:	e055      	b.n	8000da8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	4a2a      	ldr	r2, [pc, #168]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d12:	4b28      	ldr	r3, [pc, #160]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	e021      	b.n	8000d66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10f      	bne.n	8000d48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000d28:	4b22      	ldr	r3, [pc, #136]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	e00e      	b.n	8000d66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000d48:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <BSP_LED_Init+0xe0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <BSP_LED_Init+0xe4>)
 8000d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <BSP_LED_Init+0xe8>)
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	f107 0218 	add.w	r2, r7, #24
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc4c 	bl	8001628 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <BSP_LED_Init+0xe8>)
 8000d94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <BSP_LED_Init+0xe4>)
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	f000 fde8 	bl	8001978 <HAL_GPIO_WritePin>
  }

  return ret;
 8000da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	@ 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	58024400 	.word	0x58024400
 8000db8:	08005024 	.word	0x08005024
 8000dbc:	2400000c 	.word	0x2400000c

08000dc0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <BSP_LED_On+0x28>
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d006      	beq.n	8000de8 <BSP_LED_On+0x28>
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d003      	beq.n	8000de8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000de0:	f06f 0301 	mvn.w	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e00b      	b.n	8000e00 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <BSP_LED_On+0x4c>)
 8000dec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <BSP_LED_On+0x50>)
 8000df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f000 fdbc 	bl	8001978 <HAL_GPIO_WritePin>
  }

  return ret;
 8000e00:	68fb      	ldr	r3, [r7, #12]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2400000c 	.word	0x2400000c
 8000e10:	08005024 	.word	0x08005024

08000e14 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d006      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d003      	beq.n	8000e3c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e34:	f06f 0301 	mvn.w	r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	e00b      	b.n	8000e54 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <BSP_LED_Toggle+0x4c>)
 8000e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <BSP_LED_Toggle+0x50>)
 8000e48:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f000 fdab 	bl	80019aa <HAL_GPIO_TogglePin>
  }

  return ret;
 8000e54:	68fb      	ldr	r3, [r7, #12]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2400000c 	.word	0x2400000c
 8000e64:	08005024 	.word	0x08005024

08000e68 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000e78:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e88:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <BSP_PB_Init+0xcc>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000e96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e9a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4a21      	ldr	r2, [pc, #132]	@ (8000f38 <BSP_PB_Init+0xd0>)
 8000eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fbb3 	bl	8001628 <HAL_GPIO_Init>
 8000ec2:	e031      	b.n	8000f28 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000ec4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ec8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <BSP_PB_Init+0xd0>)
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fba5 	bl	8001628 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <BSP_PB_Init+0xd4>)
 8000ee4:	441a      	add	r2, r3
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4915      	ldr	r1, [pc, #84]	@ (8000f40 <BSP_PB_Init+0xd8>)
 8000eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	f000 fb54 	bl	800159e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <BSP_PB_Init+0xd4>)
 8000efc:	1898      	adds	r0, r3, r2
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <BSP_PB_Init+0xdc>)
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	461a      	mov	r2, r3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	f000 fb29 	bl	8001560 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000f0e:	2028      	movs	r0, #40	@ 0x28
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <BSP_PB_Init+0xe0>)
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f000 fa73 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000f20:	2328      	movs	r3, #40	@ 0x28
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fa89 	bl	800143a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	58024400 	.word	0x58024400
 8000f38:	24000018 	.word	0x24000018
 8000f3c:	240000bc 	.word	0x240000bc
 8000f40:	0800502c 	.word	0x0800502c
 8000f44:	2400001c 	.word	0x2400001c
 8000f48:	24000020 	.word	0x24000020

08000f4c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <BSP_PB_IRQHandler+0x20>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fb32 	bl	80015c8 <HAL_EXTI_IRQHandler>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	240000bc 	.word	0x240000bc

08000f70 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f86:	f06f 0301 	mvn.w	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e018      	b.n	8000fc0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2294      	movs	r2, #148	@ 0x94
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <BSP_COM_Init+0x5c>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f86e 	bl	800107c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2294      	movs	r2, #148	@ 0x94
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <BSP_COM_Init+0x5c>)
 8000faa:	4413      	add	r3, r2
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f80e 	bl	8000fd0 <MX_USART3_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d002      	beq.n	8000fc0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000fba:	f06f 0303 	mvn.w	r3, #3
 8000fbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	240000c4 	.word	0x240000c4

08000fd0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <MX_USART3_Init+0x60>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	220c      	movs	r2, #12
 8000fee:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	895b      	ldrh	r3, [r3, #10]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	891b      	ldrh	r3, [r3, #8]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	899b      	ldrh	r3, [r3, #12]
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800101c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f001 ff3c 	bl	8002e9c <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000008 	.word	0x24000008

08001034 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <__io_putchar+0x30>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	2394      	movs	r3, #148	@ 0x94
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <__io_putchar+0x34>)
 800104a:	1898      	adds	r0, r3, r2
 800104c:	1d39      	adds	r1, r7, #4
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	2201      	movs	r2, #1
 8001054:	f001 ff7c 	bl	8002f50 <HAL_UART_Transmit>
  return ch;
 8001058:	687b      	ldr	r3, [r7, #4]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000158 	.word	0x24000158
 8001068:	240000c4 	.word	0x240000c4

0800106c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc4d 	bl	8000910 <BSP_PB_Callback>
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	@ 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <COM1_MspInit+0xa8>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108a:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <COM1_MspInit+0xa8>)
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <COM1_MspInit+0xa8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010a2:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <COM1_MspInit+0xa8>)
 80010a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <COM1_MspInit+0xa8>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <COM1_MspInit+0xa8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <COM1_MspInit+0xa8>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <COM1_MspInit+0xa8>)
 80010d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010f0:	2307      	movs	r3, #7
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <COM1_MspInit+0xac>)
 80010fc:	f000 fa94 	bl	8001628 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001100:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001104:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800110a:	2307      	movs	r3, #7
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <COM1_MspInit+0xac>)
 8001116:	f000 fa87 	bl	8001628 <HAL_GPIO_Init>
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	58024400 	.word	0x58024400
 8001128:	58020c00 	.word	0x58020c00

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f95c 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f001 fa1c 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	@ (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fbdd 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	08005014 	.word	0x08005014
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f941 	bl	8001456 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ec:	f000 f90b 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	@ (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000028 	.word	0x24000028
 8001208:	24000000 	.word	0x24000000
 800120c:	24000024 	.word	0x24000024

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	24000028 	.word	0x24000028
 8001234:	2400015c 	.word	0x2400015c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400015c 	.word	0x2400015c

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff40 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa4 	bl	80013ac <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001474:	f3bf 8f5f 	dmb	sy
}
 8001478:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <HAL_MPU_Disable+0x28>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <HAL_MPU_Disable+0x28>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_MPU_Disable+0x2c>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	e000ed90 	.word	0xe000ed90

080014a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_MPU_Enable+0x38>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_MPU_Enable+0x3c>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_MPU_Enable+0x3c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014be:	f3bf 8f4f 	dsb	sy
}
 80014c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c4:	f3bf 8f6f 	isb	sy
}
 80014c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed90 	.word	0xe000ed90
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	785a      	ldrb	r2, [r3, #1]
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
 8001508:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7adb      	ldrb	r3, [r3, #11]
 800150e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001510:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7a9b      	ldrb	r3, [r3, #10]
 8001516:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b5b      	ldrb	r3, [r3, #13]
 800151e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b9b      	ldrb	r3, [r3, #14]
 8001526:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7bdb      	ldrb	r3, [r3, #15]
 800152e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7a5b      	ldrb	r3, [r3, #9]
 8001536:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a1b      	ldrb	r3, [r3, #8]
 800153e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001540:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800154a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800154c:	6113      	str	r3, [r2, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed90 	.word	0xe000ed90

08001560 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	460b      	mov	r3, r1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e00a      	b.n	8001592 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d103      	bne.n	800158a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	605a      	str	r2, [r3, #4]
      break;
 8001588:	e002      	b.n	8001590 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
      break;
 800158e:	bf00      	nop
  }

  return status;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e003      	b.n	80015ba <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
  }
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2201      	movs	r2, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	011a      	lsls	r2, r3, #4
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_EXTI_IRQHandler+0x5c>)
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d002      	beq.n	800161a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4798      	blx	r3
    }
  }
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58000088 	.word	0x58000088

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001636:	4b86      	ldr	r3, [pc, #536]	@ (8001850 <HAL_GPIO_Init+0x228>)
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800163a:	e18c      	b.n	8001956 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 817e 	beq.w	8001950 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x44>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	69b9      	ldr	r1, [r7, #24]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80d8 	beq.w	8001950 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001854 <HAL_GPIO_Init+0x22c>)
 80017a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <HAL_GPIO_Init+0x22c>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_GPIO_Init+0x22c>)
 80017b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <HAL_GPIO_Init+0x230>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1d      	ldr	r2, [pc, #116]	@ (800185c <HAL_GPIO_Init+0x234>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d04a      	beq.n	8001880 <HAL_GPIO_Init+0x258>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_GPIO_Init+0x238>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d02b      	beq.n	800184a <HAL_GPIO_Init+0x222>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001864 <HAL_GPIO_Init+0x23c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d025      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_GPIO_Init+0x240>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01f      	beq.n	8001842 <HAL_GPIO_Init+0x21a>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a19      	ldr	r2, [pc, #100]	@ (800186c <HAL_GPIO_Init+0x244>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x216>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_GPIO_Init+0x248>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x212>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_GPIO_Init+0x24c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x20e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a16      	ldr	r2, [pc, #88]	@ (8001878 <HAL_GPIO_Init+0x250>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x20a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a15      	ldr	r2, [pc, #84]	@ (800187c <HAL_GPIO_Init+0x254>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x206>
 800182a:	2309      	movs	r3, #9
 800182c:	e029      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 800182e:	230a      	movs	r3, #10
 8001830:	e027      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 8001832:	2307      	movs	r3, #7
 8001834:	e025      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 8001836:	2306      	movs	r3, #6
 8001838:	e023      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 800183a:	2305      	movs	r3, #5
 800183c:	e021      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 800183e:	2304      	movs	r3, #4
 8001840:	e01f      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 8001842:	2303      	movs	r3, #3
 8001844:	e01d      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 8001846:	2302      	movs	r3, #2
 8001848:	e01b      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 800184a:	2301      	movs	r3, #1
 800184c:	e019      	b.n	8001882 <HAL_GPIO_Init+0x25a>
 800184e:	bf00      	nop
 8001850:	58000080 	.word	0x58000080
 8001854:	58024400 	.word	0x58024400
 8001858:	58000400 	.word	0x58000400
 800185c:	58020000 	.word	0x58020000
 8001860:	58020400 	.word	0x58020400
 8001864:	58020800 	.word	0x58020800
 8001868:	58020c00 	.word	0x58020c00
 800186c:	58021000 	.word	0x58021000
 8001870:	58021400 	.word	0x58021400
 8001874:	58021800 	.word	0x58021800
 8001878:	58021c00 	.word	0x58021c00
 800187c:	58022400 	.word	0x58022400
 8001880:	2300      	movs	r3, #0
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	f002 0203 	and.w	r2, r2, #3
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	4093      	lsls	r3, r2
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001892:	4938      	ldr	r1, [pc, #224]	@ (8001974 <HAL_GPIO_Init+0x34c>)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae6b 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	3724      	adds	r7, #36	@ 0x24
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	58000400 	.word	0x58000400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001988:	787b      	ldrb	r3, [r7, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001994:	e003      	b.n	800199e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001996:	887b      	ldrh	r3, [r7, #2]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019bc:	887a      	ldrh	r2, [r7, #2]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4013      	ands	r3, r2
 80019c2:	041a      	lsls	r2, r3, #16
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	400b      	ands	r3, r1
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_PWREx_ConfigSupply+0x70>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d00a      	beq.n	8001a0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019f4:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_PWREx_ConfigSupply+0x70>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d001      	beq.n	8001a06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e01f      	b.n	8001a46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e01d      	b.n	8001a46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_PWREx_ConfigSupply+0x70>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	490f      	ldr	r1, [pc, #60]	@ (8001a50 <HAL_PWREx_ConfigSupply+0x70>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a1a:	f7ff fc0d 	bl	8001238 <HAL_GetTick>
 8001a1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a20:	e009      	b.n	8001a36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a22:	f7ff fc09 	bl	8001238 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	d901      	bls.n	8001a36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e007      	b.n	8001a46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_PWREx_ConfigSupply+0x70>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a42:	d1ee      	bne.n	8001a22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	58024800 	.word	0x58024800

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	@ 0x30
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e3c8      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8087 	beq.w	8001b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4b88      	ldr	r3, [pc, #544]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a7e:	4b86      	ldr	r3, [pc, #536]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d007      	beq.n	8001a9a <HAL_RCC_OscConfig+0x46>
 8001a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	d110      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
 8001a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d06c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x12c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d168      	bne.n	8001b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e3a2      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aba:	d106      	bne.n	8001aca <HAL_RCC_OscConfig+0x76>
 8001abc:	4b76      	ldr	r3, [pc, #472]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a75      	ldr	r2, [pc, #468]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e02e      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4b71      	ldr	r3, [pc, #452]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a70      	ldr	r2, [pc, #448]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b6e      	ldr	r3, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001ae4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0xbc>
 8001af6:	4b68      	ldr	r3, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a67      	ldr	r2, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b65      	ldr	r3, [pc, #404]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a64      	ldr	r2, [pc, #400]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0xd4>
 8001b10:	4b61      	ldr	r3, [pc, #388]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a60      	ldr	r2, [pc, #384]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d013      	beq.n	8001b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb82 	bl	8001238 <HAL_GetTick>
 8001b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff fb7e 	bl	8001238 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e356      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0xe4>
 8001b56:	e014      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb6e 	bl	8001238 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb6a 	bl	8001238 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e342      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b72:	4b49      	ldr	r3, [pc, #292]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x10c>
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 808c 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b90:	4b41      	ldr	r3, [pc, #260]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x162>
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2b18      	cmp	r3, #24
 8001baa:	d137      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c8>
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d132      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x17a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e314      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bce:	4b32      	ldr	r3, [pc, #200]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0219 	bic.w	r2, r3, #25
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	492f      	ldr	r1, [pc, #188]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fb2a 	bl	8001238 <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff fb26 	bl	8001238 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e2fe      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfa:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	061b      	lsls	r3, r3, #24
 8001c14:	4920      	ldr	r1, [pc, #128]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1a:	e045      	b.n	8001ca8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d026      	beq.n	8001c72 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c24:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0219 	bic.w	r2, r3, #25
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4919      	ldr	r1, [pc, #100]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff faff 	bl	8001238 <HAL_GetTick>
 8001c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fafb 	bl	8001238 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e2d3      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
 8001c70:	e01a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_RCC_OscConfig+0x244>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fadb 	bl	8001238 <HAL_GetTick>
 8001c82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c86:	f7ff fad7 	bl	8001238 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d903      	bls.n	8001c9c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2af      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
 8001c98:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c9c:	4b96      	ldr	r3, [pc, #600]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d06a      	beq.n	8001d8a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb4:	4b90      	ldr	r3, [pc, #576]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cbc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d007      	beq.n	8001cda <HAL_RCC_OscConfig+0x286>
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b18      	cmp	r3, #24
 8001cce:	d11b      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2b4>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d116      	bne.n	8001d08 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cda:	4b87      	ldr	r3, [pc, #540]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x29e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	2b80      	cmp	r3, #128	@ 0x80
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e282      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cf2:	4b81      	ldr	r3, [pc, #516]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	497d      	ldr	r1, [pc, #500]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d06:	e040      	b.n	8001d8a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d023      	beq.n	8001d58 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d10:	4b79      	ldr	r3, [pc, #484]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a78      	ldr	r2, [pc, #480]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fa8c 	bl	8001238 <HAL_GetTick>
 8001d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d24:	f7ff fa88 	bl	8001238 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e260      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d36:	4b70      	ldr	r3, [pc, #448]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d42:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	061b      	lsls	r3, r3, #24
 8001d50:	4969      	ldr	r1, [pc, #420]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60cb      	str	r3, [r1, #12]
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d58:	4b67      	ldr	r3, [pc, #412]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a66      	ldr	r2, [pc, #408]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff fa68 	bl	8001238 <HAL_GetTick>
 8001d68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fa64 	bl	8001238 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e23c      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d036      	beq.n	8001e04 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d019      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9e:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001da2:	4a55      	ldr	r2, [pc, #340]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fa45 	bl	8001238 <HAL_GetTick>
 8001dae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fa41 	bl	8001238 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e219      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x35e>
 8001dd0:	e018      	b.n	8001e04 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b49      	ldr	r3, [pc, #292]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	4a48      	ldr	r2, [pc, #288]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa2b 	bl	8001238 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7ff fa27 	bl	8001238 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1ff      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001df8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d036      	beq.n	8001e7e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e18:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa08 	bl	8001238 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e2c:	f7ff fa04 	bl	8001238 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1dc      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x3d8>
 8001e4a:	e018      	b.n	8001e7e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e58:	f7ff f9ee 	bl	8001238 <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e60:	f7ff f9ea 	bl	8001238 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1c2      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8086 	beq.w	8001f98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001efc <HAL_RCC_OscConfig+0x4a8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <HAL_RCC_OscConfig+0x4a8>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e98:	f7ff f9ce 	bl	8001238 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7ff f9ca 	bl	8001238 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1a2      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb2:	4b12      	ldr	r3, [pc, #72]	@ (8001efc <HAL_RCC_OscConfig+0x4a8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x480>
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed2:	e032      	b.n	8001f3a <HAL_RCC_OscConfig+0x4e6>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_RCC_OscConfig+0x4ac>
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001ee2:	f023 0301 	bic.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eec:	4a02      	ldr	r2, [pc, #8]	@ (8001ef8 <HAL_RCC_OscConfig+0x4a4>)
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef4:	e021      	b.n	8001f3a <HAL_RCC_OscConfig+0x4e6>
 8001ef6:	bf00      	nop
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	58024800 	.word	0x58024800
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d10c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x4ce>
 8001f08:	4b83      	ldr	r3, [pc, #524]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a82      	ldr	r2, [pc, #520]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f14:	4b80      	ldr	r3, [pc, #512]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f18:	4a7f      	ldr	r2, [pc, #508]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f20:	e00b      	b.n	8001f3a <HAL_RCC_OscConfig+0x4e6>
 8001f22:	4b7d      	ldr	r3, [pc, #500]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	4a7c      	ldr	r2, [pc, #496]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f32:	4a79      	ldr	r2, [pc, #484]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7ff f979 	bl	8001238 <HAL_GetTick>
 8001f46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7ff f975 	bl	8001238 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e14b      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f60:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ee      	beq.n	8001f4a <HAL_RCC_OscConfig+0x4f6>
 8001f6c:	e014      	b.n	8001f98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff f963 	bl	8001238 <HAL_GetTick>
 8001f72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff f95f 	bl	8001238 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e135      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f8c:	4b62      	ldr	r3, [pc, #392]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ee      	bne.n	8001f76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 812a 	beq.w	80021f6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001faa:	2b18      	cmp	r3, #24
 8001fac:	f000 80ba 	beq.w	8002124 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	f040 8095 	bne.w	80020e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a56      	ldr	r2, [pc, #344]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f937 	bl	8001238 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f933 	bl	8001238 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e10b      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fec:	4b4a      	ldr	r3, [pc, #296]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8001fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ff0:	4b4a      	ldr	r3, [pc, #296]	@ (800211c <HAL_RCC_OscConfig+0x6c8>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	430a      	orrs	r2, r1
 8002000:	4945      	ldr	r1, [pc, #276]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	628b      	str	r3, [r1, #40]	@ 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	3b01      	subs	r3, #1
 800200c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002014:	3b01      	subs	r3, #1
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	b29b      	uxth	r3, r3
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202e:	3b01      	subs	r3, #1
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002036:	4938      	ldr	r1, [pc, #224]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800203c:	4b36      	ldr	r3, [pc, #216]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	4a35      	ldr	r2, [pc, #212]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002042:	f023 0301 	bic.w	r3, r3, #1
 8002046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800204c:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <HAL_RCC_OscConfig+0x6cc>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	4930      	ldr	r1, [pc, #192]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800205c:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800205e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002060:	f023 020c 	bic.w	r2, r3, #12
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	492b      	ldr	r1, [pc, #172]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800206e:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002072:	f023 0202 	bic.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	4927      	ldr	r1, [pc, #156]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800207c:	4313      	orrs	r3, r2
 800207e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002080:	4b25      	ldr	r3, [pc, #148]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	4a24      	ldr	r2, [pc, #144]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800208c:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800208e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 8002092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002098:	4b1f      	ldr	r3, [pc, #124]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800209e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a18      	ldr	r2, [pc, #96]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8bc 	bl	8001238 <HAL_GetTick>
 80020c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f8b8 	bl	8001238 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e090      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x670>
 80020e2:	e088      	b.n	80021f6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0b      	ldr	r2, [pc, #44]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f8a2 	bl	8001238 <HAL_GetTick>
 80020f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff f89e 	bl	8001238 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e076      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210a:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_RCC_OscConfig+0x6c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x6a4>
 8002116:	e06e      	b.n	80021f6 <HAL_RCC_OscConfig+0x7a2>
 8002118:	58024400 	.word	0x58024400
 800211c:	fffffc0c 	.word	0xfffffc0c
 8002120:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002124:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 8002126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002128:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800212a:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d031      	beq.n	800219c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0203 	and.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d12a      	bne.n	800219c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d122      	bne.n	800219c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d11a      	bne.n	800219c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	0a5b      	lsrs	r3, r3, #9
 800216a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002172:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002174:	429a      	cmp	r2, r3
 8002176:	d111      	bne.n	800219c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d108      	bne.n	800219c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0e1b      	lsrs	r3, r3, #24
 800218e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002196:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e02b      	b.n	80021f8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	08db      	lsrs	r3, r3, #3
 80021a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d01f      	beq.n	80021f6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021b6:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	4a11      	ldr	r2, [pc, #68]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021bc:	f023 0301 	bic.w	r3, r3, #1
 80021c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021c2:	f7ff f839 	bl	8001238 <HAL_GetTick>
 80021c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021c8:	bf00      	nop
 80021ca:	f7ff f835 	bl	8001238 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d0f9      	beq.n	80021ca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_RCC_OscConfig+0x7b0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021e2:	00d2      	lsls	r2, r2, #3
 80021e4:	4906      	ldr	r1, [pc, #24]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_RCC_OscConfig+0x7ac>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3730      	adds	r7, #48	@ 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	58024400 	.word	0x58024400
 8002204:	ffff0007 	.word	0xffff0007

08002208 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e19c      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b8a      	ldr	r3, [pc, #552]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d910      	bls.n	800224c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b87      	ldr	r3, [pc, #540]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4985      	ldr	r1, [pc, #532]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b83      	ldr	r3, [pc, #524]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e184      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	4b7b      	ldr	r3, [pc, #492]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002264:	429a      	cmp	r2, r3
 8002266:	d908      	bls.n	800227a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002268:	4b78      	ldr	r3, [pc, #480]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	4975      	ldr	r1, [pc, #468]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002276:	4313      	orrs	r3, r2
 8002278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d010      	beq.n	80022a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	4b70      	ldr	r3, [pc, #448]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002292:	429a      	cmp	r2, r3
 8002294:	d908      	bls.n	80022a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002296:	4b6d      	ldr	r3, [pc, #436]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	496a      	ldr	r1, [pc, #424]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	4b64      	ldr	r3, [pc, #400]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d908      	bls.n	80022d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022c4:	4b61      	ldr	r3, [pc, #388]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	495e      	ldr	r1, [pc, #376]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69da      	ldr	r2, [r3, #28]
 80022e6:	4b59      	ldr	r3, [pc, #356]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d908      	bls.n	8002304 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022f2:	4b56      	ldr	r3, [pc, #344]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4953      	ldr	r1, [pc, #332]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002300:	4313      	orrs	r3, r2
 8002302:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	429a      	cmp	r2, r3
 800231e:	d908      	bls.n	8002332 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b4a      	ldr	r3, [pc, #296]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f023 020f 	bic.w	r2, r3, #15
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4947      	ldr	r1, [pc, #284]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800232e:	4313      	orrs	r3, r2
 8002330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d055      	beq.n	80023ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800233e:	4b43      	ldr	r3, [pc, #268]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	4940      	ldr	r1, [pc, #256]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800234c:	4313      	orrs	r3, r2
 800234e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002358:	4b3c      	ldr	r3, [pc, #240]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d121      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0f6      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002370:	4b36      	ldr	r3, [pc, #216]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d115      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0ea      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d107      	bne.n	8002398 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002388:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0de      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002398:	4b2c      	ldr	r3, [pc, #176]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d6      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a8:	4b28      	ldr	r3, [pc, #160]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4925      	ldr	r1, [pc, #148]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ba:	f7fe ff3d 	bl	8001238 <HAL_GetTick>
 80023be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c2:	f7fe ff39 	bl	8001238 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0be      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d8:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d1eb      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d010      	beq.n	8002418 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	4b14      	ldr	r3, [pc, #80]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	429a      	cmp	r2, r3
 8002404:	d208      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	490e      	ldr	r1, [pc, #56]	@ (800244c <HAL_RCC_ClockConfig+0x244>)
 8002414:	4313      	orrs	r3, r2
 8002416:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d214      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 020f 	bic.w	r2, r3, #15
 800242e:	4906      	ldr	r1, [pc, #24]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <HAL_RCC_ClockConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e086      	b.n	8002556 <HAL_RCC_ClockConfig+0x34e>
 8002448:	52002000 	.word	0x52002000
 800244c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d010      	beq.n	800247e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	4b3f      	ldr	r3, [pc, #252]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002468:	429a      	cmp	r2, r3
 800246a:	d208      	bcs.n	800247e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800246c:	4b3c      	ldr	r3, [pc, #240]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	4939      	ldr	r1, [pc, #228]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 800247a:	4313      	orrs	r3, r2
 800247c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002496:	429a      	cmp	r2, r3
 8002498:	d208      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	492e      	ldr	r1, [pc, #184]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d010      	beq.n	80024da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d208      	bcs.n	80024da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024c8:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4922      	ldr	r1, [pc, #136]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d208      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4917      	ldr	r1, [pc, #92]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 8002504:	4313      	orrs	r3, r2
 8002506:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002508:	f000 f834 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	4912      	ldr	r1, [pc, #72]	@ (8002564 <HAL_RCC_ClockConfig+0x35c>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_RCC_ClockConfig+0x358>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <HAL_RCC_ClockConfig+0x35c>)
 8002530:	5cd3      	ldrb	r3, [r2, r3]
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <HAL_RCC_ClockConfig+0x360>)
 800253e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002540:	4a0a      	ldr	r2, [pc, #40]	@ (800256c <HAL_RCC_ClockConfig+0x364>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x368>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fe2a 	bl	80011a4 <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	08005014 	.word	0x08005014
 8002568:	24000004 	.word	0x24000004
 800256c:	24000000 	.word	0x24000000
 8002570:	24000024 	.word	0x24000024

08002574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257a:	4bb3      	ldr	r3, [pc, #716]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002582:	2b18      	cmp	r3, #24
 8002584:	f200 8155 	bhi.w	8002832 <HAL_RCC_GetSysClockFreq+0x2be>
 8002588:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <HAL_RCC_GetSysClockFreq+0x1c>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025f5 	.word	0x080025f5
 8002594:	08002833 	.word	0x08002833
 8002598:	08002833 	.word	0x08002833
 800259c:	08002833 	.word	0x08002833
 80025a0:	08002833 	.word	0x08002833
 80025a4:	08002833 	.word	0x08002833
 80025a8:	08002833 	.word	0x08002833
 80025ac:	08002833 	.word	0x08002833
 80025b0:	0800261b 	.word	0x0800261b
 80025b4:	08002833 	.word	0x08002833
 80025b8:	08002833 	.word	0x08002833
 80025bc:	08002833 	.word	0x08002833
 80025c0:	08002833 	.word	0x08002833
 80025c4:	08002833 	.word	0x08002833
 80025c8:	08002833 	.word	0x08002833
 80025cc:	08002833 	.word	0x08002833
 80025d0:	08002621 	.word	0x08002621
 80025d4:	08002833 	.word	0x08002833
 80025d8:	08002833 	.word	0x08002833
 80025dc:	08002833 	.word	0x08002833
 80025e0:	08002833 	.word	0x08002833
 80025e4:	08002833 	.word	0x08002833
 80025e8:	08002833 	.word	0x08002833
 80025ec:	08002833 	.word	0x08002833
 80025f0:	08002627 	.word	0x08002627
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025f4:	4b94      	ldr	r3, [pc, #592]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002600:	4b91      	ldr	r3, [pc, #580]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	4a90      	ldr	r2, [pc, #576]	@ (800284c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
 8002610:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002612:	e111      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002614:	4b8d      	ldr	r3, [pc, #564]	@ (800284c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002616:	61bb      	str	r3, [r7, #24]
      break;
 8002618:	e10e      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800261a:	4b8d      	ldr	r3, [pc, #564]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800261c:	61bb      	str	r3, [r7, #24]
      break;
 800261e:	e10b      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002620:	4b8c      	ldr	r3, [pc, #560]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002622:	61bb      	str	r3, [r7, #24]
      break;
 8002624:	e108      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002626:	4b88      	ldr	r3, [pc, #544]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002630:	4b85      	ldr	r3, [pc, #532]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800263a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800263c:	4b82      	ldr	r3, [pc, #520]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002646:	4b80      	ldr	r3, [pc, #512]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80e1 	beq.w	800282c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b02      	cmp	r3, #2
 800266e:	f000 8083 	beq.w	8002778 <HAL_RCC_GetSysClockFreq+0x204>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f200 80a1 	bhi.w	80027bc <HAL_RCC_GetSysClockFreq+0x248>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x114>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d056      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002686:	e099      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002688:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d02d      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002694:	4b6c      	ldr	r3, [pc, #432]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	4a6b      	ldr	r2, [pc, #428]	@ (800284c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
 80026a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026be:	4b62      	ldr	r3, [pc, #392]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80026d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026ee:	e087      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800285c <HAL_RCC_GetSysClockFreq+0x2e8>
 80026fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002702:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002712:	ed97 6a02 	vldr	s12, [r7, #8]
 8002716:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800271a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800271e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800272a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002732:	e065      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800273e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002746:	4b40      	ldr	r3, [pc, #256]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002756:	ed97 6a02 	vldr	s12, [r7, #8]
 800275a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800275e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800276a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800276e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002776:	e043      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002782:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002864 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278a:	4b2f      	ldr	r3, [pc, #188]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800279a:	ed97 6a02 	vldr	s12, [r7, #8]
 800279e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ba:	e021      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002860 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027de:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002858 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	0a5b      	lsrs	r3, r3, #9
 8002806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800280a:	3301      	adds	r3, #1
 800280c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002818:	edd7 6a07 	vldr	s13, [r7, #28]
 800281c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002824:	ee17 3a90 	vmov	r3, s15
 8002828:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800282a:	e005      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
      break;
 8002830:	e002      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002832:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002834:	61bb      	str	r3, [r7, #24]
      break;
 8002836:	bf00      	nop
  }

  return sysclockfreq;
 8002838:	69bb      	ldr	r3, [r7, #24]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	@ 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	58024400 	.word	0x58024400
 800284c:	03d09000 	.word	0x03d09000
 8002850:	003d0900 	.word	0x003d0900
 8002854:	007a1200 	.word	0x007a1200
 8002858:	46000000 	.word	0x46000000
 800285c:	4c742400 	.word	0x4c742400
 8002860:	4a742400 	.word	0x4a742400
 8002864:	4af42400 	.word	0x4af42400

08002868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800286e:	f7ff fe81 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002872:	4602      	mov	r2, r0
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	490f      	ldr	r1, [pc, #60]	@ (80028bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002880:	5ccb      	ldrb	r3, [r1, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800288c:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <HAL_RCC_GetHCLKFreq+0x54>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a6:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58024400 	.word	0x58024400
 80028bc:	08005014 	.word	0x08005014
 80028c0:	24000004 	.word	0x24000004
 80028c4:	24000000 	.word	0x24000000

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028cc:	f7ff ffcc 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	091b      	lsrs	r3, r3, #4
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58024400 	.word	0x58024400
 80028f0:	08005014 	.word	0x08005014

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80028f8:	f7ff ffb6 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4904      	ldr	r1, [pc, #16]	@ (800291c <HAL_RCC_GetPCLK2Freq+0x28>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	58024400 	.word	0x58024400
 800291c:	08005014 	.word	0x08005014

08002920 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002924:	f7ff ffa0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4904      	ldr	r1, [pc, #16]	@ (8002948 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024400 	.word	0x58024400
 8002948:	08005014 	.word	0x08005014

0800294c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	@ 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002954:	4ba1      	ldr	r3, [pc, #644]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800295e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	0b1b      	lsrs	r3, r3, #12
 8002964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002968:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800296a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002976:	4b99      	ldr	r3, [pc, #612]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	08db      	lsrs	r3, r3, #3
 800297c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8111 	beq.w	8002bbc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b02      	cmp	r3, #2
 800299e:	f000 8083 	beq.w	8002aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f200 80a1 	bhi.w	8002aec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d056      	beq.n	8002a64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80029b6:	e099      	b.n	8002aec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b8:	4b88      	ldr	r3, [pc, #544]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02d      	beq.n	8002a20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029c4:	4b85      	ldr	r3, [pc, #532]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	4a84      	ldr	r2, [pc, #528]	@ (8002be0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	4b7b      	ldr	r3, [pc, #492]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a1e:	e087      	b.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	ee07 3a90 	vmov	s15, r3
 8002a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002be8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a62:	e065      	b.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a76:	4b59      	ldr	r3, [pc, #356]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aa6:	e043      	b.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ace:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aea:	e021      	b.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b37      	ldr	r3, [pc, #220]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002be4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b30:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	0a5b      	lsrs	r3, r3, #9
 8002b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b56:	ee17 2a90 	vmov	r2, s15
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	0c1b      	lsrs	r3, r3, #16
 8002b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b84:	ee17 2a90 	vmov	r2, s15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	0e1b      	lsrs	r3, r3, #24
 8002b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb2:	ee17 2a90 	vmov	r2, s15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002bba:	e008      	b.n	8002bce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
}
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	03d09000 	.word	0x03d09000
 8002be4:	46000000 	.word	0x46000000
 8002be8:	4c742400 	.word	0x4c742400
 8002bec:	4a742400 	.word	0x4a742400
 8002bf0:	4af42400 	.word	0x4af42400

08002bf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	@ 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002bfc:	4ba1      	ldr	r3, [pc, #644]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002c06:	4b9f      	ldr	r3, [pc, #636]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	0d1b      	lsrs	r3, r3, #20
 8002c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c12:	4b9c      	ldr	r3, [pc, #624]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002c1e:	4b99      	ldr	r3, [pc, #612]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8111 	beq.w	8002e64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	f000 8083 	beq.w	8002d50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f200 80a1 	bhi.w	8002d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d056      	beq.n	8002d0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c5e:	e099      	b.n	8002d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c60:	4b88      	ldr	r3, [pc, #544]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02d      	beq.n	8002cc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c6c:	4b85      	ldr	r3, [pc, #532]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	08db      	lsrs	r3, r3, #3
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	4a84      	ldr	r2, [pc, #528]	@ (8002e88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c96:	4b7b      	ldr	r3, [pc, #492]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002caa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002cc6:	e087      	b.n	8002dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002e90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cda:	4b6a      	ldr	r3, [pc, #424]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d0a:	e065      	b.n	8002dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	4b59      	ldr	r3, [pc, #356]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d4e:	e043      	b.n	8002dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d62:	4b48      	ldr	r3, [pc, #288]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d92:	e021      	b.n	8002dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	4b37      	ldr	r3, [pc, #220]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	0a5b      	lsrs	r3, r3, #9
 8002dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002e06:	4b1f      	ldr	r3, [pc, #124]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2c:	ee17 2a90 	vmov	r2, s15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e34:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	0e1b      	lsrs	r3, r3, #24
 8002e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 2a90 	vmov	r2, s15
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002e62:	e008      	b.n	8002e76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	bf00      	nop
 8002e78:	3724      	adds	r7, #36	@ 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	58024400 	.word	0x58024400
 8002e88:	03d09000 	.word	0x03d09000
 8002e8c:	46000000 	.word	0x46000000
 8002e90:	4c742400 	.word	0x4c742400
 8002e94:	4a742400 	.word	0x4a742400
 8002e98:	4af42400 	.word	0x4af42400

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e042      	b.n	8002f34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f83b 	bl	8002f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2224      	movs	r2, #36	@ 0x24
 8002eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 ff2c 	bl	8003d44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8bd 	bl	800306c <UART_SetConfig>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01b      	b.n	8002f34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ffab 	bl	8003e88 <UART_CheckIdleState>
 8002f32:	4603      	mov	r3, r0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	@ 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	2b20      	cmp	r3, #32
 8002f68:	d17b      	bne.n	8003062 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_UART_Transmit+0x26>
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e074      	b.n	8003064 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe f955 	bl	8001238 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	88fa      	ldrh	r2, [r7, #6]
 8002f9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa8:	d108      	bne.n	8002fbc <HAL_UART_Transmit+0x6c>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	e003      	b.n	8002fc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc4:	e030      	b.n	8003028 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	@ 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f001 f803 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e03d      	b.n	8003064 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3302      	adds	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	e007      	b.n	8003016 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3301      	adds	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1c8      	bne.n	8002fc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	2140      	movs	r1, #64	@ 0x40
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 ffcc 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e006      	b.n	8003064 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003070:	b092      	sub	sp, #72	@ 0x48
 8003072:	af00      	add	r7, sp, #0
 8003074:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4313      	orrs	r3, r2
 8003092:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4bbe      	ldr	r3, [pc, #760]	@ (8003394 <UART_SetConfig+0x328>)
 800309c:	4013      	ands	r3, r2
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4ab3      	ldr	r2, [pc, #716]	@ (8003398 <UART_SetConfig+0x32c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d4:	4313      	orrs	r3, r2
 80030d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4baf      	ldr	r3, [pc, #700]	@ (800339c <UART_SetConfig+0x330>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	f023 010f 	bic.w	r1, r3, #15
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4aa6      	ldr	r2, [pc, #664]	@ (80033a0 <UART_SetConfig+0x334>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d177      	bne.n	80031fc <UART_SetConfig+0x190>
 800310c:	4ba5      	ldr	r3, [pc, #660]	@ (80033a4 <UART_SetConfig+0x338>)
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003114:	2b28      	cmp	r3, #40	@ 0x28
 8003116:	d86d      	bhi.n	80031f4 <UART_SetConfig+0x188>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0xb4>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	080031c5 	.word	0x080031c5
 8003124:	080031f5 	.word	0x080031f5
 8003128:	080031f5 	.word	0x080031f5
 800312c:	080031f5 	.word	0x080031f5
 8003130:	080031f5 	.word	0x080031f5
 8003134:	080031f5 	.word	0x080031f5
 8003138:	080031f5 	.word	0x080031f5
 800313c:	080031f5 	.word	0x080031f5
 8003140:	080031cd 	.word	0x080031cd
 8003144:	080031f5 	.word	0x080031f5
 8003148:	080031f5 	.word	0x080031f5
 800314c:	080031f5 	.word	0x080031f5
 8003150:	080031f5 	.word	0x080031f5
 8003154:	080031f5 	.word	0x080031f5
 8003158:	080031f5 	.word	0x080031f5
 800315c:	080031f5 	.word	0x080031f5
 8003160:	080031d5 	.word	0x080031d5
 8003164:	080031f5 	.word	0x080031f5
 8003168:	080031f5 	.word	0x080031f5
 800316c:	080031f5 	.word	0x080031f5
 8003170:	080031f5 	.word	0x080031f5
 8003174:	080031f5 	.word	0x080031f5
 8003178:	080031f5 	.word	0x080031f5
 800317c:	080031f5 	.word	0x080031f5
 8003180:	080031dd 	.word	0x080031dd
 8003184:	080031f5 	.word	0x080031f5
 8003188:	080031f5 	.word	0x080031f5
 800318c:	080031f5 	.word	0x080031f5
 8003190:	080031f5 	.word	0x080031f5
 8003194:	080031f5 	.word	0x080031f5
 8003198:	080031f5 	.word	0x080031f5
 800319c:	080031f5 	.word	0x080031f5
 80031a0:	080031e5 	.word	0x080031e5
 80031a4:	080031f5 	.word	0x080031f5
 80031a8:	080031f5 	.word	0x080031f5
 80031ac:	080031f5 	.word	0x080031f5
 80031b0:	080031f5 	.word	0x080031f5
 80031b4:	080031f5 	.word	0x080031f5
 80031b8:	080031f5 	.word	0x080031f5
 80031bc:	080031f5 	.word	0x080031f5
 80031c0:	080031ed 	.word	0x080031ed
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ca:	e326      	b.n	800381a <UART_SetConfig+0x7ae>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d2:	e322      	b.n	800381a <UART_SetConfig+0x7ae>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e31e      	b.n	800381a <UART_SetConfig+0x7ae>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e2:	e31a      	b.n	800381a <UART_SetConfig+0x7ae>
 80031e4:	2320      	movs	r3, #32
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e316      	b.n	800381a <UART_SetConfig+0x7ae>
 80031ec:	2340      	movs	r3, #64	@ 0x40
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e312      	b.n	800381a <UART_SetConfig+0x7ae>
 80031f4:	2380      	movs	r3, #128	@ 0x80
 80031f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fa:	e30e      	b.n	800381a <UART_SetConfig+0x7ae>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a69      	ldr	r2, [pc, #420]	@ (80033a8 <UART_SetConfig+0x33c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d130      	bne.n	8003268 <UART_SetConfig+0x1fc>
 8003206:	4b67      	ldr	r3, [pc, #412]	@ (80033a4 <UART_SetConfig+0x338>)
 8003208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	2b05      	cmp	r3, #5
 8003210:	d826      	bhi.n	8003260 <UART_SetConfig+0x1f4>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0x1ac>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003231 	.word	0x08003231
 800321c:	08003239 	.word	0x08003239
 8003220:	08003241 	.word	0x08003241
 8003224:	08003249 	.word	0x08003249
 8003228:	08003251 	.word	0x08003251
 800322c:	08003259 	.word	0x08003259
 8003230:	2300      	movs	r3, #0
 8003232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003236:	e2f0      	b.n	800381a <UART_SetConfig+0x7ae>
 8003238:	2304      	movs	r3, #4
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e2ec      	b.n	800381a <UART_SetConfig+0x7ae>
 8003240:	2308      	movs	r3, #8
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e2e8      	b.n	800381a <UART_SetConfig+0x7ae>
 8003248:	2310      	movs	r3, #16
 800324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800324e:	e2e4      	b.n	800381a <UART_SetConfig+0x7ae>
 8003250:	2320      	movs	r3, #32
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e2e0      	b.n	800381a <UART_SetConfig+0x7ae>
 8003258:	2340      	movs	r3, #64	@ 0x40
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325e:	e2dc      	b.n	800381a <UART_SetConfig+0x7ae>
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003266:	e2d8      	b.n	800381a <UART_SetConfig+0x7ae>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a4f      	ldr	r2, [pc, #316]	@ (80033ac <UART_SetConfig+0x340>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d130      	bne.n	80032d4 <UART_SetConfig+0x268>
 8003272:	4b4c      	ldr	r3, [pc, #304]	@ (80033a4 <UART_SetConfig+0x338>)
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	2b05      	cmp	r3, #5
 800327c:	d826      	bhi.n	80032cc <UART_SetConfig+0x260>
 800327e:	a201      	add	r2, pc, #4	@ (adr r2, 8003284 <UART_SetConfig+0x218>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	0800329d 	.word	0x0800329d
 8003288:	080032a5 	.word	0x080032a5
 800328c:	080032ad 	.word	0x080032ad
 8003290:	080032b5 	.word	0x080032b5
 8003294:	080032bd 	.word	0x080032bd
 8003298:	080032c5 	.word	0x080032c5
 800329c:	2300      	movs	r3, #0
 800329e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032a2:	e2ba      	b.n	800381a <UART_SetConfig+0x7ae>
 80032a4:	2304      	movs	r3, #4
 80032a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032aa:	e2b6      	b.n	800381a <UART_SetConfig+0x7ae>
 80032ac:	2308      	movs	r3, #8
 80032ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032b2:	e2b2      	b.n	800381a <UART_SetConfig+0x7ae>
 80032b4:	2310      	movs	r3, #16
 80032b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ba:	e2ae      	b.n	800381a <UART_SetConfig+0x7ae>
 80032bc:	2320      	movs	r3, #32
 80032be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c2:	e2aa      	b.n	800381a <UART_SetConfig+0x7ae>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ca:	e2a6      	b.n	800381a <UART_SetConfig+0x7ae>
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032d2:	e2a2      	b.n	800381a <UART_SetConfig+0x7ae>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a35      	ldr	r2, [pc, #212]	@ (80033b0 <UART_SetConfig+0x344>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d130      	bne.n	8003340 <UART_SetConfig+0x2d4>
 80032de:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <UART_SetConfig+0x338>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d826      	bhi.n	8003338 <UART_SetConfig+0x2cc>
 80032ea:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <UART_SetConfig+0x284>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003309 	.word	0x08003309
 80032f4:	08003311 	.word	0x08003311
 80032f8:	08003319 	.word	0x08003319
 80032fc:	08003321 	.word	0x08003321
 8003300:	08003329 	.word	0x08003329
 8003304:	08003331 	.word	0x08003331
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330e:	e284      	b.n	800381a <UART_SetConfig+0x7ae>
 8003310:	2304      	movs	r3, #4
 8003312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003316:	e280      	b.n	800381a <UART_SetConfig+0x7ae>
 8003318:	2308      	movs	r3, #8
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e27c      	b.n	800381a <UART_SetConfig+0x7ae>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003326:	e278      	b.n	800381a <UART_SetConfig+0x7ae>
 8003328:	2320      	movs	r3, #32
 800332a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332e:	e274      	b.n	800381a <UART_SetConfig+0x7ae>
 8003330:	2340      	movs	r3, #64	@ 0x40
 8003332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003336:	e270      	b.n	800381a <UART_SetConfig+0x7ae>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800333e:	e26c      	b.n	800381a <UART_SetConfig+0x7ae>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <UART_SetConfig+0x348>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d142      	bne.n	80033d0 <UART_SetConfig+0x364>
 800334a:	4b16      	ldr	r3, [pc, #88]	@ (80033a4 <UART_SetConfig+0x338>)
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	2b05      	cmp	r3, #5
 8003354:	d838      	bhi.n	80033c8 <UART_SetConfig+0x35c>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <UART_SetConfig+0x2f0>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003375 	.word	0x08003375
 8003360:	0800337d 	.word	0x0800337d
 8003364:	08003385 	.word	0x08003385
 8003368:	0800338d 	.word	0x0800338d
 800336c:	080033b9 	.word	0x080033b9
 8003370:	080033c1 	.word	0x080033c1
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337a:	e24e      	b.n	800381a <UART_SetConfig+0x7ae>
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003382:	e24a      	b.n	800381a <UART_SetConfig+0x7ae>
 8003384:	2308      	movs	r3, #8
 8003386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338a:	e246      	b.n	800381a <UART_SetConfig+0x7ae>
 800338c:	2310      	movs	r3, #16
 800338e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003392:	e242      	b.n	800381a <UART_SetConfig+0x7ae>
 8003394:	cfff69f3 	.word	0xcfff69f3
 8003398:	58000c00 	.word	0x58000c00
 800339c:	11fff4ff 	.word	0x11fff4ff
 80033a0:	40011000 	.word	0x40011000
 80033a4:	58024400 	.word	0x58024400
 80033a8:	40004400 	.word	0x40004400
 80033ac:	40004800 	.word	0x40004800
 80033b0:	40004c00 	.word	0x40004c00
 80033b4:	40005000 	.word	0x40005000
 80033b8:	2320      	movs	r3, #32
 80033ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033be:	e22c      	b.n	800381a <UART_SetConfig+0x7ae>
 80033c0:	2340      	movs	r3, #64	@ 0x40
 80033c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033c6:	e228      	b.n	800381a <UART_SetConfig+0x7ae>
 80033c8:	2380      	movs	r3, #128	@ 0x80
 80033ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ce:	e224      	b.n	800381a <UART_SetConfig+0x7ae>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4ab1      	ldr	r2, [pc, #708]	@ (800369c <UART_SetConfig+0x630>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d176      	bne.n	80034c8 <UART_SetConfig+0x45c>
 80033da:	4bb1      	ldr	r3, [pc, #708]	@ (80036a0 <UART_SetConfig+0x634>)
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033e2:	2b28      	cmp	r3, #40	@ 0x28
 80033e4:	d86c      	bhi.n	80034c0 <UART_SetConfig+0x454>
 80033e6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <UART_SetConfig+0x380>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003491 	.word	0x08003491
 80033f0:	080034c1 	.word	0x080034c1
 80033f4:	080034c1 	.word	0x080034c1
 80033f8:	080034c1 	.word	0x080034c1
 80033fc:	080034c1 	.word	0x080034c1
 8003400:	080034c1 	.word	0x080034c1
 8003404:	080034c1 	.word	0x080034c1
 8003408:	080034c1 	.word	0x080034c1
 800340c:	08003499 	.word	0x08003499
 8003410:	080034c1 	.word	0x080034c1
 8003414:	080034c1 	.word	0x080034c1
 8003418:	080034c1 	.word	0x080034c1
 800341c:	080034c1 	.word	0x080034c1
 8003420:	080034c1 	.word	0x080034c1
 8003424:	080034c1 	.word	0x080034c1
 8003428:	080034c1 	.word	0x080034c1
 800342c:	080034a1 	.word	0x080034a1
 8003430:	080034c1 	.word	0x080034c1
 8003434:	080034c1 	.word	0x080034c1
 8003438:	080034c1 	.word	0x080034c1
 800343c:	080034c1 	.word	0x080034c1
 8003440:	080034c1 	.word	0x080034c1
 8003444:	080034c1 	.word	0x080034c1
 8003448:	080034c1 	.word	0x080034c1
 800344c:	080034a9 	.word	0x080034a9
 8003450:	080034c1 	.word	0x080034c1
 8003454:	080034c1 	.word	0x080034c1
 8003458:	080034c1 	.word	0x080034c1
 800345c:	080034c1 	.word	0x080034c1
 8003460:	080034c1 	.word	0x080034c1
 8003464:	080034c1 	.word	0x080034c1
 8003468:	080034c1 	.word	0x080034c1
 800346c:	080034b1 	.word	0x080034b1
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080034c1 	.word	0x080034c1
 8003478:	080034c1 	.word	0x080034c1
 800347c:	080034c1 	.word	0x080034c1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034c1 	.word	0x080034c1
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003496:	e1c0      	b.n	800381a <UART_SetConfig+0x7ae>
 8003498:	2304      	movs	r3, #4
 800349a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800349e:	e1bc      	b.n	800381a <UART_SetConfig+0x7ae>
 80034a0:	2308      	movs	r3, #8
 80034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a6:	e1b8      	b.n	800381a <UART_SetConfig+0x7ae>
 80034a8:	2310      	movs	r3, #16
 80034aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ae:	e1b4      	b.n	800381a <UART_SetConfig+0x7ae>
 80034b0:	2320      	movs	r3, #32
 80034b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034b6:	e1b0      	b.n	800381a <UART_SetConfig+0x7ae>
 80034b8:	2340      	movs	r3, #64	@ 0x40
 80034ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034be:	e1ac      	b.n	800381a <UART_SetConfig+0x7ae>
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034c6:	e1a8      	b.n	800381a <UART_SetConfig+0x7ae>
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a75      	ldr	r2, [pc, #468]	@ (80036a4 <UART_SetConfig+0x638>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d130      	bne.n	8003534 <UART_SetConfig+0x4c8>
 80034d2:	4b73      	ldr	r3, [pc, #460]	@ (80036a0 <UART_SetConfig+0x634>)
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d826      	bhi.n	800352c <UART_SetConfig+0x4c0>
 80034de:	a201      	add	r2, pc, #4	@ (adr r2, 80034e4 <UART_SetConfig+0x478>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	080034fd 	.word	0x080034fd
 80034e8:	08003505 	.word	0x08003505
 80034ec:	0800350d 	.word	0x0800350d
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351d 	.word	0x0800351d
 80034f8:	08003525 	.word	0x08003525
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003502:	e18a      	b.n	800381a <UART_SetConfig+0x7ae>
 8003504:	2304      	movs	r3, #4
 8003506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800350a:	e186      	b.n	800381a <UART_SetConfig+0x7ae>
 800350c:	2308      	movs	r3, #8
 800350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003512:	e182      	b.n	800381a <UART_SetConfig+0x7ae>
 8003514:	2310      	movs	r3, #16
 8003516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800351a:	e17e      	b.n	800381a <UART_SetConfig+0x7ae>
 800351c:	2320      	movs	r3, #32
 800351e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003522:	e17a      	b.n	800381a <UART_SetConfig+0x7ae>
 8003524:	2340      	movs	r3, #64	@ 0x40
 8003526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800352a:	e176      	b.n	800381a <UART_SetConfig+0x7ae>
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003532:	e172      	b.n	800381a <UART_SetConfig+0x7ae>
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5b      	ldr	r2, [pc, #364]	@ (80036a8 <UART_SetConfig+0x63c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d130      	bne.n	80035a0 <UART_SetConfig+0x534>
 800353e:	4b58      	ldr	r3, [pc, #352]	@ (80036a0 <UART_SetConfig+0x634>)
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	2b05      	cmp	r3, #5
 8003548:	d826      	bhi.n	8003598 <UART_SetConfig+0x52c>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0x4e4>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003569 	.word	0x08003569
 8003554:	08003571 	.word	0x08003571
 8003558:	08003579 	.word	0x08003579
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800356e:	e154      	b.n	800381a <UART_SetConfig+0x7ae>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003576:	e150      	b.n	800381a <UART_SetConfig+0x7ae>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800357e:	e14c      	b.n	800381a <UART_SetConfig+0x7ae>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003586:	e148      	b.n	800381a <UART_SetConfig+0x7ae>
 8003588:	2320      	movs	r3, #32
 800358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800358e:	e144      	b.n	800381a <UART_SetConfig+0x7ae>
 8003590:	2340      	movs	r3, #64	@ 0x40
 8003592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003596:	e140      	b.n	800381a <UART_SetConfig+0x7ae>
 8003598:	2380      	movs	r3, #128	@ 0x80
 800359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800359e:	e13c      	b.n	800381a <UART_SetConfig+0x7ae>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <UART_SetConfig+0x640>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f040 8082 	bne.w	80036b0 <UART_SetConfig+0x644>
 80035ac:	4b3c      	ldr	r3, [pc, #240]	@ (80036a0 <UART_SetConfig+0x634>)
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b4:	2b28      	cmp	r3, #40	@ 0x28
 80035b6:	d86d      	bhi.n	8003694 <UART_SetConfig+0x628>
 80035b8:	a201      	add	r2, pc, #4	@ (adr r2, 80035c0 <UART_SetConfig+0x554>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	08003665 	.word	0x08003665
 80035c4:	08003695 	.word	0x08003695
 80035c8:	08003695 	.word	0x08003695
 80035cc:	08003695 	.word	0x08003695
 80035d0:	08003695 	.word	0x08003695
 80035d4:	08003695 	.word	0x08003695
 80035d8:	08003695 	.word	0x08003695
 80035dc:	08003695 	.word	0x08003695
 80035e0:	0800366d 	.word	0x0800366d
 80035e4:	08003695 	.word	0x08003695
 80035e8:	08003695 	.word	0x08003695
 80035ec:	08003695 	.word	0x08003695
 80035f0:	08003695 	.word	0x08003695
 80035f4:	08003695 	.word	0x08003695
 80035f8:	08003695 	.word	0x08003695
 80035fc:	08003695 	.word	0x08003695
 8003600:	08003675 	.word	0x08003675
 8003604:	08003695 	.word	0x08003695
 8003608:	08003695 	.word	0x08003695
 800360c:	08003695 	.word	0x08003695
 8003610:	08003695 	.word	0x08003695
 8003614:	08003695 	.word	0x08003695
 8003618:	08003695 	.word	0x08003695
 800361c:	08003695 	.word	0x08003695
 8003620:	0800367d 	.word	0x0800367d
 8003624:	08003695 	.word	0x08003695
 8003628:	08003695 	.word	0x08003695
 800362c:	08003695 	.word	0x08003695
 8003630:	08003695 	.word	0x08003695
 8003634:	08003695 	.word	0x08003695
 8003638:	08003695 	.word	0x08003695
 800363c:	08003695 	.word	0x08003695
 8003640:	08003685 	.word	0x08003685
 8003644:	08003695 	.word	0x08003695
 8003648:	08003695 	.word	0x08003695
 800364c:	08003695 	.word	0x08003695
 8003650:	08003695 	.word	0x08003695
 8003654:	08003695 	.word	0x08003695
 8003658:	08003695 	.word	0x08003695
 800365c:	08003695 	.word	0x08003695
 8003660:	0800368d 	.word	0x0800368d
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800366a:	e0d6      	b.n	800381a <UART_SetConfig+0x7ae>
 800366c:	2304      	movs	r3, #4
 800366e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003672:	e0d2      	b.n	800381a <UART_SetConfig+0x7ae>
 8003674:	2308      	movs	r3, #8
 8003676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800367a:	e0ce      	b.n	800381a <UART_SetConfig+0x7ae>
 800367c:	2310      	movs	r3, #16
 800367e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003682:	e0ca      	b.n	800381a <UART_SetConfig+0x7ae>
 8003684:	2320      	movs	r3, #32
 8003686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800368a:	e0c6      	b.n	800381a <UART_SetConfig+0x7ae>
 800368c:	2340      	movs	r3, #64	@ 0x40
 800368e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003692:	e0c2      	b.n	800381a <UART_SetConfig+0x7ae>
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800369a:	e0be      	b.n	800381a <UART_SetConfig+0x7ae>
 800369c:	40011400 	.word	0x40011400
 80036a0:	58024400 	.word	0x58024400
 80036a4:	40007800 	.word	0x40007800
 80036a8:	40007c00 	.word	0x40007c00
 80036ac:	40011800 	.word	0x40011800
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4aad      	ldr	r2, [pc, #692]	@ (800396c <UART_SetConfig+0x900>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d176      	bne.n	80037a8 <UART_SetConfig+0x73c>
 80036ba:	4bad      	ldr	r3, [pc, #692]	@ (8003970 <UART_SetConfig+0x904>)
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c2:	2b28      	cmp	r3, #40	@ 0x28
 80036c4:	d86c      	bhi.n	80037a0 <UART_SetConfig+0x734>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <UART_SetConfig+0x660>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	08003771 	.word	0x08003771
 80036d0:	080037a1 	.word	0x080037a1
 80036d4:	080037a1 	.word	0x080037a1
 80036d8:	080037a1 	.word	0x080037a1
 80036dc:	080037a1 	.word	0x080037a1
 80036e0:	080037a1 	.word	0x080037a1
 80036e4:	080037a1 	.word	0x080037a1
 80036e8:	080037a1 	.word	0x080037a1
 80036ec:	08003779 	.word	0x08003779
 80036f0:	080037a1 	.word	0x080037a1
 80036f4:	080037a1 	.word	0x080037a1
 80036f8:	080037a1 	.word	0x080037a1
 80036fc:	080037a1 	.word	0x080037a1
 8003700:	080037a1 	.word	0x080037a1
 8003704:	080037a1 	.word	0x080037a1
 8003708:	080037a1 	.word	0x080037a1
 800370c:	08003781 	.word	0x08003781
 8003710:	080037a1 	.word	0x080037a1
 8003714:	080037a1 	.word	0x080037a1
 8003718:	080037a1 	.word	0x080037a1
 800371c:	080037a1 	.word	0x080037a1
 8003720:	080037a1 	.word	0x080037a1
 8003724:	080037a1 	.word	0x080037a1
 8003728:	080037a1 	.word	0x080037a1
 800372c:	08003789 	.word	0x08003789
 8003730:	080037a1 	.word	0x080037a1
 8003734:	080037a1 	.word	0x080037a1
 8003738:	080037a1 	.word	0x080037a1
 800373c:	080037a1 	.word	0x080037a1
 8003740:	080037a1 	.word	0x080037a1
 8003744:	080037a1 	.word	0x080037a1
 8003748:	080037a1 	.word	0x080037a1
 800374c:	08003791 	.word	0x08003791
 8003750:	080037a1 	.word	0x080037a1
 8003754:	080037a1 	.word	0x080037a1
 8003758:	080037a1 	.word	0x080037a1
 800375c:	080037a1 	.word	0x080037a1
 8003760:	080037a1 	.word	0x080037a1
 8003764:	080037a1 	.word	0x080037a1
 8003768:	080037a1 	.word	0x080037a1
 800376c:	08003799 	.word	0x08003799
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003776:	e050      	b.n	800381a <UART_SetConfig+0x7ae>
 8003778:	2304      	movs	r3, #4
 800377a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800377e:	e04c      	b.n	800381a <UART_SetConfig+0x7ae>
 8003780:	2308      	movs	r3, #8
 8003782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003786:	e048      	b.n	800381a <UART_SetConfig+0x7ae>
 8003788:	2310      	movs	r3, #16
 800378a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800378e:	e044      	b.n	800381a <UART_SetConfig+0x7ae>
 8003790:	2320      	movs	r3, #32
 8003792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003796:	e040      	b.n	800381a <UART_SetConfig+0x7ae>
 8003798:	2340      	movs	r3, #64	@ 0x40
 800379a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800379e:	e03c      	b.n	800381a <UART_SetConfig+0x7ae>
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037a6:	e038      	b.n	800381a <UART_SetConfig+0x7ae>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a71      	ldr	r2, [pc, #452]	@ (8003974 <UART_SetConfig+0x908>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d130      	bne.n	8003814 <UART_SetConfig+0x7a8>
 80037b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003970 <UART_SetConfig+0x904>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d826      	bhi.n	800380c <UART_SetConfig+0x7a0>
 80037be:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <UART_SetConfig+0x758>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037dd 	.word	0x080037dd
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	080037ed 	.word	0x080037ed
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003805 	.word	0x08003805
 80037dc:	2302      	movs	r3, #2
 80037de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037e2:	e01a      	b.n	800381a <UART_SetConfig+0x7ae>
 80037e4:	2304      	movs	r3, #4
 80037e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037ea:	e016      	b.n	800381a <UART_SetConfig+0x7ae>
 80037ec:	2308      	movs	r3, #8
 80037ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037f2:	e012      	b.n	800381a <UART_SetConfig+0x7ae>
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037fa:	e00e      	b.n	800381a <UART_SetConfig+0x7ae>
 80037fc:	2320      	movs	r3, #32
 80037fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003802:	e00a      	b.n	800381a <UART_SetConfig+0x7ae>
 8003804:	2340      	movs	r3, #64	@ 0x40
 8003806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800380a:	e006      	b.n	800381a <UART_SetConfig+0x7ae>
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003812:	e002      	b.n	800381a <UART_SetConfig+0x7ae>
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a55      	ldr	r2, [pc, #340]	@ (8003974 <UART_SetConfig+0x908>)
 8003820:	4293      	cmp	r3, r2
 8003822:	f040 80f8 	bne.w	8003a16 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003826:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800382a:	2b20      	cmp	r3, #32
 800382c:	dc46      	bgt.n	80038bc <UART_SetConfig+0x850>
 800382e:	2b02      	cmp	r3, #2
 8003830:	db75      	blt.n	800391e <UART_SetConfig+0x8b2>
 8003832:	3b02      	subs	r3, #2
 8003834:	2b1e      	cmp	r3, #30
 8003836:	d872      	bhi.n	800391e <UART_SetConfig+0x8b2>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <UART_SetConfig+0x7d4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	080038c3 	.word	0x080038c3
 8003844:	0800391f 	.word	0x0800391f
 8003848:	080038cb 	.word	0x080038cb
 800384c:	0800391f 	.word	0x0800391f
 8003850:	0800391f 	.word	0x0800391f
 8003854:	0800391f 	.word	0x0800391f
 8003858:	080038db 	.word	0x080038db
 800385c:	0800391f 	.word	0x0800391f
 8003860:	0800391f 	.word	0x0800391f
 8003864:	0800391f 	.word	0x0800391f
 8003868:	0800391f 	.word	0x0800391f
 800386c:	0800391f 	.word	0x0800391f
 8003870:	0800391f 	.word	0x0800391f
 8003874:	0800391f 	.word	0x0800391f
 8003878:	080038eb 	.word	0x080038eb
 800387c:	0800391f 	.word	0x0800391f
 8003880:	0800391f 	.word	0x0800391f
 8003884:	0800391f 	.word	0x0800391f
 8003888:	0800391f 	.word	0x0800391f
 800388c:	0800391f 	.word	0x0800391f
 8003890:	0800391f 	.word	0x0800391f
 8003894:	0800391f 	.word	0x0800391f
 8003898:	0800391f 	.word	0x0800391f
 800389c:	0800391f 	.word	0x0800391f
 80038a0:	0800391f 	.word	0x0800391f
 80038a4:	0800391f 	.word	0x0800391f
 80038a8:	0800391f 	.word	0x0800391f
 80038ac:	0800391f 	.word	0x0800391f
 80038b0:	0800391f 	.word	0x0800391f
 80038b4:	0800391f 	.word	0x0800391f
 80038b8:	08003911 	.word	0x08003911
 80038bc:	2b40      	cmp	r3, #64	@ 0x40
 80038be:	d02a      	beq.n	8003916 <UART_SetConfig+0x8aa>
 80038c0:	e02d      	b.n	800391e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80038c2:	f7ff f82d 	bl	8002920 <HAL_RCCEx_GetD3PCLK1Freq>
 80038c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038c8:	e02f      	b.n	800392a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff f83c 	bl	800294c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038d8:	e027      	b.n	800392a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038da:	f107 0318 	add.w	r3, r7, #24
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f988 	bl	8002bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038e8:	e01f      	b.n	800392a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ea:	4b21      	ldr	r3, [pc, #132]	@ (8003970 <UART_SetConfig+0x904>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80038f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003970 <UART_SetConfig+0x904>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	08db      	lsrs	r3, r3, #3
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <UART_SetConfig+0x90c>)
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003908:	e00f      	b.n	800392a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <UART_SetConfig+0x90c>)
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800390e:	e00c      	b.n	800392a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003910:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <UART_SetConfig+0x910>)
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003914:	e009      	b.n	800392a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800391c:	e005      	b.n	800392a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003928:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800392a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 81ee 	beq.w	8003d0e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <UART_SetConfig+0x914>)
 8003938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393c:	461a      	mov	r2, r3
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	fbb3 f3f2 	udiv	r3, r3, r2
 8003944:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003952:	429a      	cmp	r2, r3
 8003954:	d305      	bcc.n	8003962 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800395c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395e:	429a      	cmp	r2, r3
 8003960:	d910      	bls.n	8003984 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003968:	e1d1      	b.n	8003d0e <UART_SetConfig+0xca2>
 800396a:	bf00      	nop
 800396c:	40011c00 	.word	0x40011c00
 8003970:	58024400 	.word	0x58024400
 8003974:	58000c00 	.word	0x58000c00
 8003978:	03d09000 	.word	0x03d09000
 800397c:	003d0900 	.word	0x003d0900
 8003980:	08005030 	.word	0x08005030
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003986:	2200      	movs	r2, #0
 8003988:	60bb      	str	r3, [r7, #8]
 800398a:	60fa      	str	r2, [r7, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	4ac0      	ldr	r2, [pc, #768]	@ (8003c94 <UART_SetConfig+0xc28>)
 8003992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003996:	b29b      	uxth	r3, r3
 8003998:	2200      	movs	r2, #0
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039a6:	f7fc fd03 	bl	80003b0 <__aeabi_uldivmod>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	020b      	lsls	r3, r1, #8
 80039bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039c0:	0202      	lsls	r2, r0, #8
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	6849      	ldr	r1, [r1, #4]
 80039c6:	0849      	lsrs	r1, r1, #1
 80039c8:	2000      	movs	r0, #0
 80039ca:	460c      	mov	r4, r1
 80039cc:	4605      	mov	r5, r0
 80039ce:	eb12 0804 	adds.w	r8, r2, r4
 80039d2:	eb43 0905 	adc.w	r9, r3, r5
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	469a      	mov	sl, r3
 80039de:	4693      	mov	fp, r2
 80039e0:	4652      	mov	r2, sl
 80039e2:	465b      	mov	r3, fp
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fc fce2 	bl	80003b0 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039fa:	d308      	bcc.n	8003a0e <UART_SetConfig+0x9a2>
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a02:	d204      	bcs.n	8003a0e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e17f      	b.n	8003d0e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003a14:	e17b      	b.n	8003d0e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a1e:	f040 80bd 	bne.w	8003b9c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8003a22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	dc48      	bgt.n	8003abc <UART_SetConfig+0xa50>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db7b      	blt.n	8003b26 <UART_SetConfig+0xaba>
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d879      	bhi.n	8003b26 <UART_SetConfig+0xaba>
 8003a32:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x9cc>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003ac3 	.word	0x08003ac3
 8003a3c:	08003acb 	.word	0x08003acb
 8003a40:	08003b27 	.word	0x08003b27
 8003a44:	08003b27 	.word	0x08003b27
 8003a48:	08003ad3 	.word	0x08003ad3
 8003a4c:	08003b27 	.word	0x08003b27
 8003a50:	08003b27 	.word	0x08003b27
 8003a54:	08003b27 	.word	0x08003b27
 8003a58:	08003ae3 	.word	0x08003ae3
 8003a5c:	08003b27 	.word	0x08003b27
 8003a60:	08003b27 	.word	0x08003b27
 8003a64:	08003b27 	.word	0x08003b27
 8003a68:	08003b27 	.word	0x08003b27
 8003a6c:	08003b27 	.word	0x08003b27
 8003a70:	08003b27 	.word	0x08003b27
 8003a74:	08003b27 	.word	0x08003b27
 8003a78:	08003af3 	.word	0x08003af3
 8003a7c:	08003b27 	.word	0x08003b27
 8003a80:	08003b27 	.word	0x08003b27
 8003a84:	08003b27 	.word	0x08003b27
 8003a88:	08003b27 	.word	0x08003b27
 8003a8c:	08003b27 	.word	0x08003b27
 8003a90:	08003b27 	.word	0x08003b27
 8003a94:	08003b27 	.word	0x08003b27
 8003a98:	08003b27 	.word	0x08003b27
 8003a9c:	08003b27 	.word	0x08003b27
 8003aa0:	08003b27 	.word	0x08003b27
 8003aa4:	08003b27 	.word	0x08003b27
 8003aa8:	08003b27 	.word	0x08003b27
 8003aac:	08003b27 	.word	0x08003b27
 8003ab0:	08003b27 	.word	0x08003b27
 8003ab4:	08003b27 	.word	0x08003b27
 8003ab8:	08003b19 	.word	0x08003b19
 8003abc:	2b40      	cmp	r3, #64	@ 0x40
 8003abe:	d02e      	beq.n	8003b1e <UART_SetConfig+0xab2>
 8003ac0:	e031      	b.n	8003b26 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac2:	f7fe ff01 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003ac6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003ac8:	e033      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aca:	f7fe ff13 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003ace:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003ad0:	e02f      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe ff38 	bl	800294c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ae0:	e027      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003ae2:	f107 0318 	add.w	r3, r7, #24
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f884 	bl	8002bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003af0:	e01f      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003af2:	4b69      	ldr	r3, [pc, #420]	@ (8003c98 <UART_SetConfig+0xc2c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003afe:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <UART_SetConfig+0xc2c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	4a64      	ldr	r2, [pc, #400]	@ (8003c9c <UART_SetConfig+0xc30>)
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b10:	e00f      	b.n	8003b32 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8003b12:	4b62      	ldr	r3, [pc, #392]	@ (8003c9c <UART_SetConfig+0xc30>)
 8003b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b16:	e00c      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003b18:	4b61      	ldr	r3, [pc, #388]	@ (8003ca0 <UART_SetConfig+0xc34>)
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b24:	e005      	b.n	8003b32 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80ea 	beq.w	8003d0e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	4a55      	ldr	r2, [pc, #340]	@ (8003c94 <UART_SetConfig+0xc28>)
 8003b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b4c:	005a      	lsls	r2, r3, #1
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	441a      	add	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b62:	2b0f      	cmp	r3, #15
 8003b64:	d916      	bls.n	8003b94 <UART_SetConfig+0xb28>
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6c:	d212      	bcs.n	8003b94 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003b86:	4313      	orrs	r3, r2
 8003b88:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	e0bc      	b.n	8003d0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003b9a:	e0b8      	b.n	8003d0e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	dc4b      	bgt.n	8003c3c <UART_SetConfig+0xbd0>
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f2c0 8087 	blt.w	8003cb8 <UART_SetConfig+0xc4c>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	f200 8084 	bhi.w	8003cb8 <UART_SetConfig+0xc4c>
 8003bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <UART_SetConfig+0xb4c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003c43 	.word	0x08003c43
 8003bbc:	08003c4b 	.word	0x08003c4b
 8003bc0:	08003cb9 	.word	0x08003cb9
 8003bc4:	08003cb9 	.word	0x08003cb9
 8003bc8:	08003c53 	.word	0x08003c53
 8003bcc:	08003cb9 	.word	0x08003cb9
 8003bd0:	08003cb9 	.word	0x08003cb9
 8003bd4:	08003cb9 	.word	0x08003cb9
 8003bd8:	08003c63 	.word	0x08003c63
 8003bdc:	08003cb9 	.word	0x08003cb9
 8003be0:	08003cb9 	.word	0x08003cb9
 8003be4:	08003cb9 	.word	0x08003cb9
 8003be8:	08003cb9 	.word	0x08003cb9
 8003bec:	08003cb9 	.word	0x08003cb9
 8003bf0:	08003cb9 	.word	0x08003cb9
 8003bf4:	08003cb9 	.word	0x08003cb9
 8003bf8:	08003c73 	.word	0x08003c73
 8003bfc:	08003cb9 	.word	0x08003cb9
 8003c00:	08003cb9 	.word	0x08003cb9
 8003c04:	08003cb9 	.word	0x08003cb9
 8003c08:	08003cb9 	.word	0x08003cb9
 8003c0c:	08003cb9 	.word	0x08003cb9
 8003c10:	08003cb9 	.word	0x08003cb9
 8003c14:	08003cb9 	.word	0x08003cb9
 8003c18:	08003cb9 	.word	0x08003cb9
 8003c1c:	08003cb9 	.word	0x08003cb9
 8003c20:	08003cb9 	.word	0x08003cb9
 8003c24:	08003cb9 	.word	0x08003cb9
 8003c28:	08003cb9 	.word	0x08003cb9
 8003c2c:	08003cb9 	.word	0x08003cb9
 8003c30:	08003cb9 	.word	0x08003cb9
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003cab 	.word	0x08003cab
 8003c3c:	2b40      	cmp	r3, #64	@ 0x40
 8003c3e:	d037      	beq.n	8003cb0 <UART_SetConfig+0xc44>
 8003c40:	e03a      	b.n	8003cb8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c42:	f7fe fe41 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8003c46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c48:	e03c      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c4a:	f7fe fe53 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003c50:	e038      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fe78 	bl	800294c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c60:	e030      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003c62:	f107 0318 	add.w	r3, r7, #24
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ffc4 	bl	8002bf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c70:	e028      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c72:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <UART_SetConfig+0xc2c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d012      	beq.n	8003ca4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <UART_SetConfig+0xc2c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	08db      	lsrs	r3, r3, #3
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	4a04      	ldr	r2, [pc, #16]	@ (8003c9c <UART_SetConfig+0xc30>)
 8003c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c90:	e018      	b.n	8003cc4 <UART_SetConfig+0xc58>
 8003c92:	bf00      	nop
 8003c94:	08005030 	.word	0x08005030
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	03d09000 	.word	0x03d09000
 8003ca0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8003ca4:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <UART_SetConfig+0xccc>)
 8003ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003ca8:	e00c      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <UART_SetConfig+0xcd0>)
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003cae:	e009      	b.n	8003cc4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003cb6:	e005      	b.n	8003cc4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d021      	beq.n	8003d0e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <UART_SetConfig+0xcd4>)
 8003cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	441a      	add	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d909      	bls.n	8003d08 <UART_SetConfig+0xc9c>
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfa:	d205      	bcs.n	8003d08 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e002      	b.n	8003d0e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d2a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3748      	adds	r7, #72	@ 0x48
 8003d32:	46bd      	mov	sp, r7
 8003d34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d38:	03d09000 	.word	0x03d09000
 8003d3c:	003d0900 	.word	0x003d0900
 8003d40:	08005030 	.word	0x08005030

08003d44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01a      	beq.n	8003e5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e42:	d10a      	bne.n	8003e5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b098      	sub	sp, #96	@ 0x60
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e98:	f7fd f9ce 	bl	8001238 <HAL_GetTick>
 8003e9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d12f      	bne.n	8003f0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f88e 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d022      	beq.n	8003f0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eda:	653b      	str	r3, [r7, #80]	@ 0x50
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e6      	bne.n	8003ec6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e063      	b.n	8003fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d149      	bne.n	8003fae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f22:	2200      	movs	r2, #0
 8003f24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f857 	bl	8003fdc <UART_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d03c      	beq.n	8003fae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	623b      	str	r3, [r7, #32]
   return(result);
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f86:	61fa      	str	r2, [r7, #28]
 8003f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	69b9      	ldr	r1, [r7, #24]
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	617b      	str	r3, [r7, #20]
   return(result);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e5      	bne.n	8003f66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e012      	b.n	8003fd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3758      	adds	r7, #88	@ 0x58
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fec:	e04f      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ff4:	d04b      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fd f91f 	bl	8001238 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <UART_WaitOnFlagUntilTimeout+0x30>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e04e      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	d037      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b80      	cmp	r3, #128	@ 0x80
 8004022:	d034      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b40      	cmp	r3, #64	@ 0x40
 8004028:	d031      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b08      	cmp	r3, #8
 8004036:	d110      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2208      	movs	r2, #8
 800403e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f839 	bl	80040b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2208      	movs	r2, #8
 800404a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e029      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004068:	d111      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f81f 	bl	80040b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e00f      	b.n	80040ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0a0      	beq.n	8003fee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b095      	sub	sp, #84	@ 0x54
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040de:	643b      	str	r3, [r7, #64]	@ 0x40
 80040e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e6      	bne.n	80040c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	61fb      	str	r3, [r7, #28]
   return(result);
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	4b1e      	ldr	r3, [pc, #120]	@ (8004180 <UART_EndRxTransfer+0xc8>)
 8004106:	4013      	ands	r3, r2
 8004108:	64bb      	str	r3, [r7, #72]	@ 0x48
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004112:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004118:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800412a:	2b01      	cmp	r3, #1
 800412c:	d118      	bne.n	8004160 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60bb      	str	r3, [r7, #8]
   return(result);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	647b      	str	r3, [r7, #68]	@ 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004174:	bf00      	nop
 8004176:	3754      	adds	r7, #84	@ 0x54
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	effffffe 	.word	0xeffffffe

08004184 <std>:
 8004184:	2300      	movs	r3, #0
 8004186:	b510      	push	{r4, lr}
 8004188:	4604      	mov	r4, r0
 800418a:	e9c0 3300 	strd	r3, r3, [r0]
 800418e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004192:	6083      	str	r3, [r0, #8]
 8004194:	8181      	strh	r1, [r0, #12]
 8004196:	6643      	str	r3, [r0, #100]	@ 0x64
 8004198:	81c2      	strh	r2, [r0, #14]
 800419a:	6183      	str	r3, [r0, #24]
 800419c:	4619      	mov	r1, r3
 800419e:	2208      	movs	r2, #8
 80041a0:	305c      	adds	r0, #92	@ 0x5c
 80041a2:	f000 f906 	bl	80043b2 <memset>
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <std+0x58>)
 80041a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <std+0x5c>)
 80041ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <std+0x60>)
 80041b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041b2:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <std+0x64>)
 80041b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <std+0x68>)
 80041b8:	6224      	str	r4, [r4, #32]
 80041ba:	429c      	cmp	r4, r3
 80041bc:	d006      	beq.n	80041cc <std+0x48>
 80041be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041c2:	4294      	cmp	r4, r2
 80041c4:	d002      	beq.n	80041cc <std+0x48>
 80041c6:	33d0      	adds	r3, #208	@ 0xd0
 80041c8:	429c      	cmp	r4, r3
 80041ca:	d105      	bne.n	80041d8 <std+0x54>
 80041cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d4:	f000 b966 	b.w	80044a4 <__retarget_lock_init_recursive>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	bf00      	nop
 80041dc:	0800432d 	.word	0x0800432d
 80041e0:	0800434f 	.word	0x0800434f
 80041e4:	08004387 	.word	0x08004387
 80041e8:	080043ab 	.word	0x080043ab
 80041ec:	24000160 	.word	0x24000160

080041f0 <stdio_exit_handler>:
 80041f0:	4a02      	ldr	r2, [pc, #8]	@ (80041fc <stdio_exit_handler+0xc>)
 80041f2:	4903      	ldr	r1, [pc, #12]	@ (8004200 <stdio_exit_handler+0x10>)
 80041f4:	4803      	ldr	r0, [pc, #12]	@ (8004204 <stdio_exit_handler+0x14>)
 80041f6:	f000 b869 	b.w	80042cc <_fwalk_sglue>
 80041fa:	bf00      	nop
 80041fc:	2400002c 	.word	0x2400002c
 8004200:	08004d41 	.word	0x08004d41
 8004204:	2400003c 	.word	0x2400003c

08004208 <cleanup_stdio>:
 8004208:	6841      	ldr	r1, [r0, #4]
 800420a:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <cleanup_stdio+0x34>)
 800420c:	4299      	cmp	r1, r3
 800420e:	b510      	push	{r4, lr}
 8004210:	4604      	mov	r4, r0
 8004212:	d001      	beq.n	8004218 <cleanup_stdio+0x10>
 8004214:	f000 fd94 	bl	8004d40 <_fflush_r>
 8004218:	68a1      	ldr	r1, [r4, #8]
 800421a:	4b09      	ldr	r3, [pc, #36]	@ (8004240 <cleanup_stdio+0x38>)
 800421c:	4299      	cmp	r1, r3
 800421e:	d002      	beq.n	8004226 <cleanup_stdio+0x1e>
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fd8d 	bl	8004d40 <_fflush_r>
 8004226:	68e1      	ldr	r1, [r4, #12]
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <cleanup_stdio+0x3c>)
 800422a:	4299      	cmp	r1, r3
 800422c:	d004      	beq.n	8004238 <cleanup_stdio+0x30>
 800422e:	4620      	mov	r0, r4
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004234:	f000 bd84 	b.w	8004d40 <_fflush_r>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	bf00      	nop
 800423c:	24000160 	.word	0x24000160
 8004240:	240001c8 	.word	0x240001c8
 8004244:	24000230 	.word	0x24000230

08004248 <global_stdio_init.part.0>:
 8004248:	b510      	push	{r4, lr}
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <global_stdio_init.part.0+0x30>)
 800424c:	4c0b      	ldr	r4, [pc, #44]	@ (800427c <global_stdio_init.part.0+0x34>)
 800424e:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <global_stdio_init.part.0+0x38>)
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	4620      	mov	r0, r4
 8004254:	2200      	movs	r2, #0
 8004256:	2104      	movs	r1, #4
 8004258:	f7ff ff94 	bl	8004184 <std>
 800425c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004260:	2201      	movs	r2, #1
 8004262:	2109      	movs	r1, #9
 8004264:	f7ff ff8e 	bl	8004184 <std>
 8004268:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800426c:	2202      	movs	r2, #2
 800426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004272:	2112      	movs	r1, #18
 8004274:	f7ff bf86 	b.w	8004184 <std>
 8004278:	24000298 	.word	0x24000298
 800427c:	24000160 	.word	0x24000160
 8004280:	080041f1 	.word	0x080041f1

08004284 <__sfp_lock_acquire>:
 8004284:	4801      	ldr	r0, [pc, #4]	@ (800428c <__sfp_lock_acquire+0x8>)
 8004286:	f000 b90e 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 800428a:	bf00      	nop
 800428c:	240002a1 	.word	0x240002a1

08004290 <__sfp_lock_release>:
 8004290:	4801      	ldr	r0, [pc, #4]	@ (8004298 <__sfp_lock_release+0x8>)
 8004292:	f000 b909 	b.w	80044a8 <__retarget_lock_release_recursive>
 8004296:	bf00      	nop
 8004298:	240002a1 	.word	0x240002a1

0800429c <__sinit>:
 800429c:	b510      	push	{r4, lr}
 800429e:	4604      	mov	r4, r0
 80042a0:	f7ff fff0 	bl	8004284 <__sfp_lock_acquire>
 80042a4:	6a23      	ldr	r3, [r4, #32]
 80042a6:	b11b      	cbz	r3, 80042b0 <__sinit+0x14>
 80042a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ac:	f7ff bff0 	b.w	8004290 <__sfp_lock_release>
 80042b0:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <__sinit+0x28>)
 80042b2:	6223      	str	r3, [r4, #32]
 80042b4:	4b04      	ldr	r3, [pc, #16]	@ (80042c8 <__sinit+0x2c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f5      	bne.n	80042a8 <__sinit+0xc>
 80042bc:	f7ff ffc4 	bl	8004248 <global_stdio_init.part.0>
 80042c0:	e7f2      	b.n	80042a8 <__sinit+0xc>
 80042c2:	bf00      	nop
 80042c4:	08004209 	.word	0x08004209
 80042c8:	24000298 	.word	0x24000298

080042cc <_fwalk_sglue>:
 80042cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d0:	4607      	mov	r7, r0
 80042d2:	4688      	mov	r8, r1
 80042d4:	4614      	mov	r4, r2
 80042d6:	2600      	movs	r6, #0
 80042d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042dc:	f1b9 0901 	subs.w	r9, r9, #1
 80042e0:	d505      	bpl.n	80042ee <_fwalk_sglue+0x22>
 80042e2:	6824      	ldr	r4, [r4, #0]
 80042e4:	2c00      	cmp	r4, #0
 80042e6:	d1f7      	bne.n	80042d8 <_fwalk_sglue+0xc>
 80042e8:	4630      	mov	r0, r6
 80042ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042ee:	89ab      	ldrh	r3, [r5, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d907      	bls.n	8004304 <_fwalk_sglue+0x38>
 80042f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f8:	3301      	adds	r3, #1
 80042fa:	d003      	beq.n	8004304 <_fwalk_sglue+0x38>
 80042fc:	4629      	mov	r1, r5
 80042fe:	4638      	mov	r0, r7
 8004300:	47c0      	blx	r8
 8004302:	4306      	orrs	r6, r0
 8004304:	3568      	adds	r5, #104	@ 0x68
 8004306:	e7e9      	b.n	80042dc <_fwalk_sglue+0x10>

08004308 <iprintf>:
 8004308:	b40f      	push	{r0, r1, r2, r3}
 800430a:	b507      	push	{r0, r1, r2, lr}
 800430c:	4906      	ldr	r1, [pc, #24]	@ (8004328 <iprintf+0x20>)
 800430e:	ab04      	add	r3, sp, #16
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	f853 2b04 	ldr.w	r2, [r3], #4
 8004316:	6881      	ldr	r1, [r0, #8]
 8004318:	9301      	str	r3, [sp, #4]
 800431a:	f000 f9e9 	bl	80046f0 <_vfiprintf_r>
 800431e:	b003      	add	sp, #12
 8004320:	f85d eb04 	ldr.w	lr, [sp], #4
 8004324:	b004      	add	sp, #16
 8004326:	4770      	bx	lr
 8004328:	24000038 	.word	0x24000038

0800432c <__sread>:
 800432c:	b510      	push	{r4, lr}
 800432e:	460c      	mov	r4, r1
 8004330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004334:	f000 f868 	bl	8004408 <_read_r>
 8004338:	2800      	cmp	r0, #0
 800433a:	bfab      	itete	ge
 800433c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800433e:	89a3      	ldrhlt	r3, [r4, #12]
 8004340:	181b      	addge	r3, r3, r0
 8004342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004346:	bfac      	ite	ge
 8004348:	6563      	strge	r3, [r4, #84]	@ 0x54
 800434a:	81a3      	strhlt	r3, [r4, #12]
 800434c:	bd10      	pop	{r4, pc}

0800434e <__swrite>:
 800434e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004352:	461f      	mov	r7, r3
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	05db      	lsls	r3, r3, #23
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	4616      	mov	r6, r2
 800435e:	d505      	bpl.n	800436c <__swrite+0x1e>
 8004360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004364:	2302      	movs	r3, #2
 8004366:	2200      	movs	r2, #0
 8004368:	f000 f83c 	bl	80043e4 <_lseek_r>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004372:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	4632      	mov	r2, r6
 800437a:	463b      	mov	r3, r7
 800437c:	4628      	mov	r0, r5
 800437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	f000 b853 	b.w	800442c <_write_r>

08004386 <__sseek>:
 8004386:	b510      	push	{r4, lr}
 8004388:	460c      	mov	r4, r1
 800438a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800438e:	f000 f829 	bl	80043e4 <_lseek_r>
 8004392:	1c43      	adds	r3, r0, #1
 8004394:	89a3      	ldrh	r3, [r4, #12]
 8004396:	bf15      	itete	ne
 8004398:	6560      	strne	r0, [r4, #84]	@ 0x54
 800439a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800439e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043a2:	81a3      	strheq	r3, [r4, #12]
 80043a4:	bf18      	it	ne
 80043a6:	81a3      	strhne	r3, [r4, #12]
 80043a8:	bd10      	pop	{r4, pc}

080043aa <__sclose>:
 80043aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ae:	f000 b809 	b.w	80043c4 <_close_r>

080043b2 <memset>:
 80043b2:	4402      	add	r2, r0
 80043b4:	4603      	mov	r3, r0
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d100      	bne.n	80043bc <memset+0xa>
 80043ba:	4770      	bx	lr
 80043bc:	f803 1b01 	strb.w	r1, [r3], #1
 80043c0:	e7f9      	b.n	80043b6 <memset+0x4>
	...

080043c4 <_close_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4d06      	ldr	r5, [pc, #24]	@ (80043e0 <_close_r+0x1c>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	602b      	str	r3, [r5, #0]
 80043d0:	f7fc fb41 	bl	8000a56 <_close>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_close_r+0x1a>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_close_r+0x1a>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	2400029c 	.word	0x2400029c

080043e4 <_lseek_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d07      	ldr	r5, [pc, #28]	@ (8004404 <_lseek_r+0x20>)
 80043e8:	4604      	mov	r4, r0
 80043ea:	4608      	mov	r0, r1
 80043ec:	4611      	mov	r1, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fc fb56 	bl	8000aa4 <_lseek>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_lseek_r+0x1e>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_lseek_r+0x1e>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	2400029c 	.word	0x2400029c

08004408 <_read_r>:
 8004408:	b538      	push	{r3, r4, r5, lr}
 800440a:	4d07      	ldr	r5, [pc, #28]	@ (8004428 <_read_r+0x20>)
 800440c:	4604      	mov	r4, r0
 800440e:	4608      	mov	r0, r1
 8004410:	4611      	mov	r1, r2
 8004412:	2200      	movs	r2, #0
 8004414:	602a      	str	r2, [r5, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	f7fc fae4 	bl	80009e4 <_read>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_read_r+0x1e>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_read_r+0x1e>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	2400029c 	.word	0x2400029c

0800442c <_write_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4d07      	ldr	r5, [pc, #28]	@ (800444c <_write_r+0x20>)
 8004430:	4604      	mov	r4, r0
 8004432:	4608      	mov	r0, r1
 8004434:	4611      	mov	r1, r2
 8004436:	2200      	movs	r2, #0
 8004438:	602a      	str	r2, [r5, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fc faef 	bl	8000a1e <_write>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_write_r+0x1e>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	b103      	cbz	r3, 800444a <_write_r+0x1e>
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	2400029c 	.word	0x2400029c

08004450 <__errno>:
 8004450:	4b01      	ldr	r3, [pc, #4]	@ (8004458 <__errno+0x8>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	24000038 	.word	0x24000038

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4d0d      	ldr	r5, [pc, #52]	@ (8004494 <__libc_init_array+0x38>)
 8004460:	4c0d      	ldr	r4, [pc, #52]	@ (8004498 <__libc_init_array+0x3c>)
 8004462:	1b64      	subs	r4, r4, r5
 8004464:	10a4      	asrs	r4, r4, #2
 8004466:	2600      	movs	r6, #0
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	4d0b      	ldr	r5, [pc, #44]	@ (800449c <__libc_init_array+0x40>)
 800446e:	4c0c      	ldr	r4, [pc, #48]	@ (80044a0 <__libc_init_array+0x44>)
 8004470:	f000 fdb6 	bl	8004fe0 <_init>
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	2600      	movs	r6, #0
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	08005084 	.word	0x08005084
 8004498:	08005084 	.word	0x08005084
 800449c:	08005084 	.word	0x08005084
 80044a0:	08005088 	.word	0x08005088

080044a4 <__retarget_lock_init_recursive>:
 80044a4:	4770      	bx	lr

080044a6 <__retarget_lock_acquire_recursive>:
 80044a6:	4770      	bx	lr

080044a8 <__retarget_lock_release_recursive>:
 80044a8:	4770      	bx	lr
	...

080044ac <_free_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4605      	mov	r5, r0
 80044b0:	2900      	cmp	r1, #0
 80044b2:	d041      	beq.n	8004538 <_free_r+0x8c>
 80044b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044b8:	1f0c      	subs	r4, r1, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bfb8      	it	lt
 80044be:	18e4      	addlt	r4, r4, r3
 80044c0:	f000 f8e0 	bl	8004684 <__malloc_lock>
 80044c4:	4a1d      	ldr	r2, [pc, #116]	@ (800453c <_free_r+0x90>)
 80044c6:	6813      	ldr	r3, [r2, #0]
 80044c8:	b933      	cbnz	r3, 80044d8 <_free_r+0x2c>
 80044ca:	6063      	str	r3, [r4, #4]
 80044cc:	6014      	str	r4, [r2, #0]
 80044ce:	4628      	mov	r0, r5
 80044d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d4:	f000 b8dc 	b.w	8004690 <__malloc_unlock>
 80044d8:	42a3      	cmp	r3, r4
 80044da:	d908      	bls.n	80044ee <_free_r+0x42>
 80044dc:	6820      	ldr	r0, [r4, #0]
 80044de:	1821      	adds	r1, r4, r0
 80044e0:	428b      	cmp	r3, r1
 80044e2:	bf01      	itttt	eq
 80044e4:	6819      	ldreq	r1, [r3, #0]
 80044e6:	685b      	ldreq	r3, [r3, #4]
 80044e8:	1809      	addeq	r1, r1, r0
 80044ea:	6021      	streq	r1, [r4, #0]
 80044ec:	e7ed      	b.n	80044ca <_free_r+0x1e>
 80044ee:	461a      	mov	r2, r3
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	b10b      	cbz	r3, 80044f8 <_free_r+0x4c>
 80044f4:	42a3      	cmp	r3, r4
 80044f6:	d9fa      	bls.n	80044ee <_free_r+0x42>
 80044f8:	6811      	ldr	r1, [r2, #0]
 80044fa:	1850      	adds	r0, r2, r1
 80044fc:	42a0      	cmp	r0, r4
 80044fe:	d10b      	bne.n	8004518 <_free_r+0x6c>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	4401      	add	r1, r0
 8004504:	1850      	adds	r0, r2, r1
 8004506:	4283      	cmp	r3, r0
 8004508:	6011      	str	r1, [r2, #0]
 800450a:	d1e0      	bne.n	80044ce <_free_r+0x22>
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6053      	str	r3, [r2, #4]
 8004512:	4408      	add	r0, r1
 8004514:	6010      	str	r0, [r2, #0]
 8004516:	e7da      	b.n	80044ce <_free_r+0x22>
 8004518:	d902      	bls.n	8004520 <_free_r+0x74>
 800451a:	230c      	movs	r3, #12
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	e7d6      	b.n	80044ce <_free_r+0x22>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	1821      	adds	r1, r4, r0
 8004524:	428b      	cmp	r3, r1
 8004526:	bf04      	itt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	bf04      	itt	eq
 8004530:	1809      	addeq	r1, r1, r0
 8004532:	6021      	streq	r1, [r4, #0]
 8004534:	6054      	str	r4, [r2, #4]
 8004536:	e7ca      	b.n	80044ce <_free_r+0x22>
 8004538:	bd38      	pop	{r3, r4, r5, pc}
 800453a:	bf00      	nop
 800453c:	240002a8 	.word	0x240002a8

08004540 <sbrk_aligned>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0f      	ldr	r6, [pc, #60]	@ (8004580 <sbrk_aligned+0x40>)
 8004544:	460c      	mov	r4, r1
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	4605      	mov	r5, r0
 800454a:	b911      	cbnz	r1, 8004552 <sbrk_aligned+0x12>
 800454c:	f000 fcb4 	bl	8004eb8 <_sbrk_r>
 8004550:	6030      	str	r0, [r6, #0]
 8004552:	4621      	mov	r1, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 fcaf 	bl	8004eb8 <_sbrk_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d103      	bne.n	8004566 <sbrk_aligned+0x26>
 800455e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004562:	4620      	mov	r0, r4
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	1cc4      	adds	r4, r0, #3
 8004568:	f024 0403 	bic.w	r4, r4, #3
 800456c:	42a0      	cmp	r0, r4
 800456e:	d0f8      	beq.n	8004562 <sbrk_aligned+0x22>
 8004570:	1a21      	subs	r1, r4, r0
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fca0 	bl	8004eb8 <_sbrk_r>
 8004578:	3001      	adds	r0, #1
 800457a:	d1f2      	bne.n	8004562 <sbrk_aligned+0x22>
 800457c:	e7ef      	b.n	800455e <sbrk_aligned+0x1e>
 800457e:	bf00      	nop
 8004580:	240002a4 	.word	0x240002a4

08004584 <_malloc_r>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	1ccd      	adds	r5, r1, #3
 800458a:	f025 0503 	bic.w	r5, r5, #3
 800458e:	3508      	adds	r5, #8
 8004590:	2d0c      	cmp	r5, #12
 8004592:	bf38      	it	cc
 8004594:	250c      	movcc	r5, #12
 8004596:	2d00      	cmp	r5, #0
 8004598:	4606      	mov	r6, r0
 800459a:	db01      	blt.n	80045a0 <_malloc_r+0x1c>
 800459c:	42a9      	cmp	r1, r5
 800459e:	d904      	bls.n	80045aa <_malloc_r+0x26>
 80045a0:	230c      	movs	r3, #12
 80045a2:	6033      	str	r3, [r6, #0]
 80045a4:	2000      	movs	r0, #0
 80045a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004680 <_malloc_r+0xfc>
 80045ae:	f000 f869 	bl	8004684 <__malloc_lock>
 80045b2:	f8d8 3000 	ldr.w	r3, [r8]
 80045b6:	461c      	mov	r4, r3
 80045b8:	bb44      	cbnz	r4, 800460c <_malloc_r+0x88>
 80045ba:	4629      	mov	r1, r5
 80045bc:	4630      	mov	r0, r6
 80045be:	f7ff ffbf 	bl	8004540 <sbrk_aligned>
 80045c2:	1c43      	adds	r3, r0, #1
 80045c4:	4604      	mov	r4, r0
 80045c6:	d158      	bne.n	800467a <_malloc_r+0xf6>
 80045c8:	f8d8 4000 	ldr.w	r4, [r8]
 80045cc:	4627      	mov	r7, r4
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	d143      	bne.n	800465a <_malloc_r+0xd6>
 80045d2:	2c00      	cmp	r4, #0
 80045d4:	d04b      	beq.n	800466e <_malloc_r+0xea>
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	4639      	mov	r1, r7
 80045da:	4630      	mov	r0, r6
 80045dc:	eb04 0903 	add.w	r9, r4, r3
 80045e0:	f000 fc6a 	bl	8004eb8 <_sbrk_r>
 80045e4:	4581      	cmp	r9, r0
 80045e6:	d142      	bne.n	800466e <_malloc_r+0xea>
 80045e8:	6821      	ldr	r1, [r4, #0]
 80045ea:	1a6d      	subs	r5, r5, r1
 80045ec:	4629      	mov	r1, r5
 80045ee:	4630      	mov	r0, r6
 80045f0:	f7ff ffa6 	bl	8004540 <sbrk_aligned>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d03a      	beq.n	800466e <_malloc_r+0xea>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	442b      	add	r3, r5
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	bb62      	cbnz	r2, 8004660 <_malloc_r+0xdc>
 8004606:	f8c8 7000 	str.w	r7, [r8]
 800460a:	e00f      	b.n	800462c <_malloc_r+0xa8>
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	1b52      	subs	r2, r2, r5
 8004610:	d420      	bmi.n	8004654 <_malloc_r+0xd0>
 8004612:	2a0b      	cmp	r2, #11
 8004614:	d917      	bls.n	8004646 <_malloc_r+0xc2>
 8004616:	1961      	adds	r1, r4, r5
 8004618:	42a3      	cmp	r3, r4
 800461a:	6025      	str	r5, [r4, #0]
 800461c:	bf18      	it	ne
 800461e:	6059      	strne	r1, [r3, #4]
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	bf08      	it	eq
 8004624:	f8c8 1000 	streq.w	r1, [r8]
 8004628:	5162      	str	r2, [r4, r5]
 800462a:	604b      	str	r3, [r1, #4]
 800462c:	4630      	mov	r0, r6
 800462e:	f000 f82f 	bl	8004690 <__malloc_unlock>
 8004632:	f104 000b 	add.w	r0, r4, #11
 8004636:	1d23      	adds	r3, r4, #4
 8004638:	f020 0007 	bic.w	r0, r0, #7
 800463c:	1ac2      	subs	r2, r0, r3
 800463e:	bf1c      	itt	ne
 8004640:	1a1b      	subne	r3, r3, r0
 8004642:	50a3      	strne	r3, [r4, r2]
 8004644:	e7af      	b.n	80045a6 <_malloc_r+0x22>
 8004646:	6862      	ldr	r2, [r4, #4]
 8004648:	42a3      	cmp	r3, r4
 800464a:	bf0c      	ite	eq
 800464c:	f8c8 2000 	streq.w	r2, [r8]
 8004650:	605a      	strne	r2, [r3, #4]
 8004652:	e7eb      	b.n	800462c <_malloc_r+0xa8>
 8004654:	4623      	mov	r3, r4
 8004656:	6864      	ldr	r4, [r4, #4]
 8004658:	e7ae      	b.n	80045b8 <_malloc_r+0x34>
 800465a:	463c      	mov	r4, r7
 800465c:	687f      	ldr	r7, [r7, #4]
 800465e:	e7b6      	b.n	80045ce <_malloc_r+0x4a>
 8004660:	461a      	mov	r2, r3
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	42a3      	cmp	r3, r4
 8004666:	d1fb      	bne.n	8004660 <_malloc_r+0xdc>
 8004668:	2300      	movs	r3, #0
 800466a:	6053      	str	r3, [r2, #4]
 800466c:	e7de      	b.n	800462c <_malloc_r+0xa8>
 800466e:	230c      	movs	r3, #12
 8004670:	6033      	str	r3, [r6, #0]
 8004672:	4630      	mov	r0, r6
 8004674:	f000 f80c 	bl	8004690 <__malloc_unlock>
 8004678:	e794      	b.n	80045a4 <_malloc_r+0x20>
 800467a:	6005      	str	r5, [r0, #0]
 800467c:	e7d6      	b.n	800462c <_malloc_r+0xa8>
 800467e:	bf00      	nop
 8004680:	240002a8 	.word	0x240002a8

08004684 <__malloc_lock>:
 8004684:	4801      	ldr	r0, [pc, #4]	@ (800468c <__malloc_lock+0x8>)
 8004686:	f7ff bf0e 	b.w	80044a6 <__retarget_lock_acquire_recursive>
 800468a:	bf00      	nop
 800468c:	240002a0 	.word	0x240002a0

08004690 <__malloc_unlock>:
 8004690:	4801      	ldr	r0, [pc, #4]	@ (8004698 <__malloc_unlock+0x8>)
 8004692:	f7ff bf09 	b.w	80044a8 <__retarget_lock_release_recursive>
 8004696:	bf00      	nop
 8004698:	240002a0 	.word	0x240002a0

0800469c <__sfputc_r>:
 800469c:	6893      	ldr	r3, [r2, #8]
 800469e:	3b01      	subs	r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	b410      	push	{r4}
 80046a4:	6093      	str	r3, [r2, #8]
 80046a6:	da08      	bge.n	80046ba <__sfputc_r+0x1e>
 80046a8:	6994      	ldr	r4, [r2, #24]
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	db01      	blt.n	80046b2 <__sfputc_r+0x16>
 80046ae:	290a      	cmp	r1, #10
 80046b0:	d103      	bne.n	80046ba <__sfputc_r+0x1e>
 80046b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046b6:	f000 bb6b 	b.w	8004d90 <__swbuf_r>
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	1c58      	adds	r0, r3, #1
 80046be:	6010      	str	r0, [r2, #0]
 80046c0:	7019      	strb	r1, [r3, #0]
 80046c2:	4608      	mov	r0, r1
 80046c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <__sfputs_r>:
 80046ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046cc:	4606      	mov	r6, r0
 80046ce:	460f      	mov	r7, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	18d5      	adds	r5, r2, r3
 80046d4:	42ac      	cmp	r4, r5
 80046d6:	d101      	bne.n	80046dc <__sfputs_r+0x12>
 80046d8:	2000      	movs	r0, #0
 80046da:	e007      	b.n	80046ec <__sfputs_r+0x22>
 80046dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e0:	463a      	mov	r2, r7
 80046e2:	4630      	mov	r0, r6
 80046e4:	f7ff ffda 	bl	800469c <__sfputc_r>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d1f3      	bne.n	80046d4 <__sfputs_r+0xa>
 80046ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046f0 <_vfiprintf_r>:
 80046f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f4:	460d      	mov	r5, r1
 80046f6:	b09d      	sub	sp, #116	@ 0x74
 80046f8:	4614      	mov	r4, r2
 80046fa:	4698      	mov	r8, r3
 80046fc:	4606      	mov	r6, r0
 80046fe:	b118      	cbz	r0, 8004708 <_vfiprintf_r+0x18>
 8004700:	6a03      	ldr	r3, [r0, #32]
 8004702:	b90b      	cbnz	r3, 8004708 <_vfiprintf_r+0x18>
 8004704:	f7ff fdca 	bl	800429c <__sinit>
 8004708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800470a:	07d9      	lsls	r1, r3, #31
 800470c:	d405      	bmi.n	800471a <_vfiprintf_r+0x2a>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	059a      	lsls	r2, r3, #22
 8004712:	d402      	bmi.n	800471a <_vfiprintf_r+0x2a>
 8004714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004716:	f7ff fec6 	bl	80044a6 <__retarget_lock_acquire_recursive>
 800471a:	89ab      	ldrh	r3, [r5, #12]
 800471c:	071b      	lsls	r3, r3, #28
 800471e:	d501      	bpl.n	8004724 <_vfiprintf_r+0x34>
 8004720:	692b      	ldr	r3, [r5, #16]
 8004722:	b99b      	cbnz	r3, 800474c <_vfiprintf_r+0x5c>
 8004724:	4629      	mov	r1, r5
 8004726:	4630      	mov	r0, r6
 8004728:	f000 fb70 	bl	8004e0c <__swsetup_r>
 800472c:	b170      	cbz	r0, 800474c <_vfiprintf_r+0x5c>
 800472e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004730:	07dc      	lsls	r4, r3, #31
 8004732:	d504      	bpl.n	800473e <_vfiprintf_r+0x4e>
 8004734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004738:	b01d      	add	sp, #116	@ 0x74
 800473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473e:	89ab      	ldrh	r3, [r5, #12]
 8004740:	0598      	lsls	r0, r3, #22
 8004742:	d4f7      	bmi.n	8004734 <_vfiprintf_r+0x44>
 8004744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004746:	f7ff feaf 	bl	80044a8 <__retarget_lock_release_recursive>
 800474a:	e7f3      	b.n	8004734 <_vfiprintf_r+0x44>
 800474c:	2300      	movs	r3, #0
 800474e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004750:	2320      	movs	r3, #32
 8004752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004756:	f8cd 800c 	str.w	r8, [sp, #12]
 800475a:	2330      	movs	r3, #48	@ 0x30
 800475c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800490c <_vfiprintf_r+0x21c>
 8004760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004764:	f04f 0901 	mov.w	r9, #1
 8004768:	4623      	mov	r3, r4
 800476a:	469a      	mov	sl, r3
 800476c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004770:	b10a      	cbz	r2, 8004776 <_vfiprintf_r+0x86>
 8004772:	2a25      	cmp	r2, #37	@ 0x25
 8004774:	d1f9      	bne.n	800476a <_vfiprintf_r+0x7a>
 8004776:	ebba 0b04 	subs.w	fp, sl, r4
 800477a:	d00b      	beq.n	8004794 <_vfiprintf_r+0xa4>
 800477c:	465b      	mov	r3, fp
 800477e:	4622      	mov	r2, r4
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ffa1 	bl	80046ca <__sfputs_r>
 8004788:	3001      	adds	r0, #1
 800478a:	f000 80a7 	beq.w	80048dc <_vfiprintf_r+0x1ec>
 800478e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004790:	445a      	add	r2, fp
 8004792:	9209      	str	r2, [sp, #36]	@ 0x24
 8004794:	f89a 3000 	ldrb.w	r3, [sl]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 809f 	beq.w	80048dc <_vfiprintf_r+0x1ec>
 800479e:	2300      	movs	r3, #0
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047a8:	f10a 0a01 	add.w	sl, sl, #1
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	9307      	str	r3, [sp, #28]
 80047b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80047b6:	4654      	mov	r4, sl
 80047b8:	2205      	movs	r2, #5
 80047ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047be:	4853      	ldr	r0, [pc, #332]	@ (800490c <_vfiprintf_r+0x21c>)
 80047c0:	f7fb fda6 	bl	8000310 <memchr>
 80047c4:	9a04      	ldr	r2, [sp, #16]
 80047c6:	b9d8      	cbnz	r0, 8004800 <_vfiprintf_r+0x110>
 80047c8:	06d1      	lsls	r1, r2, #27
 80047ca:	bf44      	itt	mi
 80047cc:	2320      	movmi	r3, #32
 80047ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047d2:	0713      	lsls	r3, r2, #28
 80047d4:	bf44      	itt	mi
 80047d6:	232b      	movmi	r3, #43	@ 0x2b
 80047d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047dc:	f89a 3000 	ldrb.w	r3, [sl]
 80047e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e2:	d015      	beq.n	8004810 <_vfiprintf_r+0x120>
 80047e4:	9a07      	ldr	r2, [sp, #28]
 80047e6:	4654      	mov	r4, sl
 80047e8:	2000      	movs	r0, #0
 80047ea:	f04f 0c0a 	mov.w	ip, #10
 80047ee:	4621      	mov	r1, r4
 80047f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047f4:	3b30      	subs	r3, #48	@ 0x30
 80047f6:	2b09      	cmp	r3, #9
 80047f8:	d94b      	bls.n	8004892 <_vfiprintf_r+0x1a2>
 80047fa:	b1b0      	cbz	r0, 800482a <_vfiprintf_r+0x13a>
 80047fc:	9207      	str	r2, [sp, #28]
 80047fe:	e014      	b.n	800482a <_vfiprintf_r+0x13a>
 8004800:	eba0 0308 	sub.w	r3, r0, r8
 8004804:	fa09 f303 	lsl.w	r3, r9, r3
 8004808:	4313      	orrs	r3, r2
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	46a2      	mov	sl, r4
 800480e:	e7d2      	b.n	80047b6 <_vfiprintf_r+0xc6>
 8004810:	9b03      	ldr	r3, [sp, #12]
 8004812:	1d19      	adds	r1, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	9103      	str	r1, [sp, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	bfbb      	ittet	lt
 800481c:	425b      	neglt	r3, r3
 800481e:	f042 0202 	orrlt.w	r2, r2, #2
 8004822:	9307      	strge	r3, [sp, #28]
 8004824:	9307      	strlt	r3, [sp, #28]
 8004826:	bfb8      	it	lt
 8004828:	9204      	strlt	r2, [sp, #16]
 800482a:	7823      	ldrb	r3, [r4, #0]
 800482c:	2b2e      	cmp	r3, #46	@ 0x2e
 800482e:	d10a      	bne.n	8004846 <_vfiprintf_r+0x156>
 8004830:	7863      	ldrb	r3, [r4, #1]
 8004832:	2b2a      	cmp	r3, #42	@ 0x2a
 8004834:	d132      	bne.n	800489c <_vfiprintf_r+0x1ac>
 8004836:	9b03      	ldr	r3, [sp, #12]
 8004838:	1d1a      	adds	r2, r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	9203      	str	r2, [sp, #12]
 800483e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004842:	3402      	adds	r4, #2
 8004844:	9305      	str	r3, [sp, #20]
 8004846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800491c <_vfiprintf_r+0x22c>
 800484a:	7821      	ldrb	r1, [r4, #0]
 800484c:	2203      	movs	r2, #3
 800484e:	4650      	mov	r0, sl
 8004850:	f7fb fd5e 	bl	8000310 <memchr>
 8004854:	b138      	cbz	r0, 8004866 <_vfiprintf_r+0x176>
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	eba0 000a 	sub.w	r0, r0, sl
 800485c:	2240      	movs	r2, #64	@ 0x40
 800485e:	4082      	lsls	r2, r0
 8004860:	4313      	orrs	r3, r2
 8004862:	3401      	adds	r4, #1
 8004864:	9304      	str	r3, [sp, #16]
 8004866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800486a:	4829      	ldr	r0, [pc, #164]	@ (8004910 <_vfiprintf_r+0x220>)
 800486c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004870:	2206      	movs	r2, #6
 8004872:	f7fb fd4d 	bl	8000310 <memchr>
 8004876:	2800      	cmp	r0, #0
 8004878:	d03f      	beq.n	80048fa <_vfiprintf_r+0x20a>
 800487a:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <_vfiprintf_r+0x224>)
 800487c:	bb1b      	cbnz	r3, 80048c6 <_vfiprintf_r+0x1d6>
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	3307      	adds	r3, #7
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	3308      	adds	r3, #8
 8004888:	9303      	str	r3, [sp, #12]
 800488a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800488c:	443b      	add	r3, r7
 800488e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004890:	e76a      	b.n	8004768 <_vfiprintf_r+0x78>
 8004892:	fb0c 3202 	mla	r2, ip, r2, r3
 8004896:	460c      	mov	r4, r1
 8004898:	2001      	movs	r0, #1
 800489a:	e7a8      	b.n	80047ee <_vfiprintf_r+0xfe>
 800489c:	2300      	movs	r3, #0
 800489e:	3401      	adds	r4, #1
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	4619      	mov	r1, r3
 80048a4:	f04f 0c0a 	mov.w	ip, #10
 80048a8:	4620      	mov	r0, r4
 80048aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ae:	3a30      	subs	r2, #48	@ 0x30
 80048b0:	2a09      	cmp	r2, #9
 80048b2:	d903      	bls.n	80048bc <_vfiprintf_r+0x1cc>
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0c6      	beq.n	8004846 <_vfiprintf_r+0x156>
 80048b8:	9105      	str	r1, [sp, #20]
 80048ba:	e7c4      	b.n	8004846 <_vfiprintf_r+0x156>
 80048bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80048c0:	4604      	mov	r4, r0
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7f0      	b.n	80048a8 <_vfiprintf_r+0x1b8>
 80048c6:	ab03      	add	r3, sp, #12
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	462a      	mov	r2, r5
 80048cc:	4b12      	ldr	r3, [pc, #72]	@ (8004918 <_vfiprintf_r+0x228>)
 80048ce:	a904      	add	r1, sp, #16
 80048d0:	4630      	mov	r0, r6
 80048d2:	f3af 8000 	nop.w
 80048d6:	4607      	mov	r7, r0
 80048d8:	1c78      	adds	r0, r7, #1
 80048da:	d1d6      	bne.n	800488a <_vfiprintf_r+0x19a>
 80048dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048de:	07d9      	lsls	r1, r3, #31
 80048e0:	d405      	bmi.n	80048ee <_vfiprintf_r+0x1fe>
 80048e2:	89ab      	ldrh	r3, [r5, #12]
 80048e4:	059a      	lsls	r2, r3, #22
 80048e6:	d402      	bmi.n	80048ee <_vfiprintf_r+0x1fe>
 80048e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048ea:	f7ff fddd 	bl	80044a8 <__retarget_lock_release_recursive>
 80048ee:	89ab      	ldrh	r3, [r5, #12]
 80048f0:	065b      	lsls	r3, r3, #25
 80048f2:	f53f af1f 	bmi.w	8004734 <_vfiprintf_r+0x44>
 80048f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048f8:	e71e      	b.n	8004738 <_vfiprintf_r+0x48>
 80048fa:	ab03      	add	r3, sp, #12
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	462a      	mov	r2, r5
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <_vfiprintf_r+0x228>)
 8004902:	a904      	add	r1, sp, #16
 8004904:	4630      	mov	r0, r6
 8004906:	f000 f879 	bl	80049fc <_printf_i>
 800490a:	e7e4      	b.n	80048d6 <_vfiprintf_r+0x1e6>
 800490c:	08005048 	.word	0x08005048
 8004910:	08005052 	.word	0x08005052
 8004914:	00000000 	.word	0x00000000
 8004918:	080046cb 	.word	0x080046cb
 800491c:	0800504e 	.word	0x0800504e

08004920 <_printf_common>:
 8004920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004924:	4616      	mov	r6, r2
 8004926:	4698      	mov	r8, r3
 8004928:	688a      	ldr	r2, [r1, #8]
 800492a:	690b      	ldr	r3, [r1, #16]
 800492c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004930:	4293      	cmp	r3, r2
 8004932:	bfb8      	it	lt
 8004934:	4613      	movlt	r3, r2
 8004936:	6033      	str	r3, [r6, #0]
 8004938:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800493c:	4607      	mov	r7, r0
 800493e:	460c      	mov	r4, r1
 8004940:	b10a      	cbz	r2, 8004946 <_printf_common+0x26>
 8004942:	3301      	adds	r3, #1
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	0699      	lsls	r1, r3, #26
 800494a:	bf42      	ittt	mi
 800494c:	6833      	ldrmi	r3, [r6, #0]
 800494e:	3302      	addmi	r3, #2
 8004950:	6033      	strmi	r3, [r6, #0]
 8004952:	6825      	ldr	r5, [r4, #0]
 8004954:	f015 0506 	ands.w	r5, r5, #6
 8004958:	d106      	bne.n	8004968 <_printf_common+0x48>
 800495a:	f104 0a19 	add.w	sl, r4, #25
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	6832      	ldr	r2, [r6, #0]
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	42ab      	cmp	r3, r5
 8004966:	dc26      	bgt.n	80049b6 <_printf_common+0x96>
 8004968:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	3b00      	subs	r3, #0
 8004970:	bf18      	it	ne
 8004972:	2301      	movne	r3, #1
 8004974:	0692      	lsls	r2, r2, #26
 8004976:	d42b      	bmi.n	80049d0 <_printf_common+0xb0>
 8004978:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800497c:	4641      	mov	r1, r8
 800497e:	4638      	mov	r0, r7
 8004980:	47c8      	blx	r9
 8004982:	3001      	adds	r0, #1
 8004984:	d01e      	beq.n	80049c4 <_printf_common+0xa4>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	6922      	ldr	r2, [r4, #16]
 800498a:	f003 0306 	and.w	r3, r3, #6
 800498e:	2b04      	cmp	r3, #4
 8004990:	bf02      	ittt	eq
 8004992:	68e5      	ldreq	r5, [r4, #12]
 8004994:	6833      	ldreq	r3, [r6, #0]
 8004996:	1aed      	subeq	r5, r5, r3
 8004998:	68a3      	ldr	r3, [r4, #8]
 800499a:	bf0c      	ite	eq
 800499c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a0:	2500      	movne	r5, #0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	bfc4      	itt	gt
 80049a6:	1a9b      	subgt	r3, r3, r2
 80049a8:	18ed      	addgt	r5, r5, r3
 80049aa:	2600      	movs	r6, #0
 80049ac:	341a      	adds	r4, #26
 80049ae:	42b5      	cmp	r5, r6
 80049b0:	d11a      	bne.n	80049e8 <_printf_common+0xc8>
 80049b2:	2000      	movs	r0, #0
 80049b4:	e008      	b.n	80049c8 <_printf_common+0xa8>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4652      	mov	r2, sl
 80049ba:	4641      	mov	r1, r8
 80049bc:	4638      	mov	r0, r7
 80049be:	47c8      	blx	r9
 80049c0:	3001      	adds	r0, #1
 80049c2:	d103      	bne.n	80049cc <_printf_common+0xac>
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	3501      	adds	r5, #1
 80049ce:	e7c6      	b.n	800495e <_printf_common+0x3e>
 80049d0:	18e1      	adds	r1, r4, r3
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	2030      	movs	r0, #48	@ 0x30
 80049d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049da:	4422      	add	r2, r4
 80049dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049e4:	3302      	adds	r3, #2
 80049e6:	e7c7      	b.n	8004978 <_printf_common+0x58>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4622      	mov	r2, r4
 80049ec:	4641      	mov	r1, r8
 80049ee:	4638      	mov	r0, r7
 80049f0:	47c8      	blx	r9
 80049f2:	3001      	adds	r0, #1
 80049f4:	d0e6      	beq.n	80049c4 <_printf_common+0xa4>
 80049f6:	3601      	adds	r6, #1
 80049f8:	e7d9      	b.n	80049ae <_printf_common+0x8e>
	...

080049fc <_printf_i>:
 80049fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a00:	7e0f      	ldrb	r7, [r1, #24]
 8004a02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a04:	2f78      	cmp	r7, #120	@ 0x78
 8004a06:	4691      	mov	r9, r2
 8004a08:	4680      	mov	r8, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	469a      	mov	sl, r3
 8004a0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a12:	d807      	bhi.n	8004a24 <_printf_i+0x28>
 8004a14:	2f62      	cmp	r7, #98	@ 0x62
 8004a16:	d80a      	bhi.n	8004a2e <_printf_i+0x32>
 8004a18:	2f00      	cmp	r7, #0
 8004a1a:	f000 80d1 	beq.w	8004bc0 <_printf_i+0x1c4>
 8004a1e:	2f58      	cmp	r7, #88	@ 0x58
 8004a20:	f000 80b8 	beq.w	8004b94 <_printf_i+0x198>
 8004a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a2c:	e03a      	b.n	8004aa4 <_printf_i+0xa8>
 8004a2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a32:	2b15      	cmp	r3, #21
 8004a34:	d8f6      	bhi.n	8004a24 <_printf_i+0x28>
 8004a36:	a101      	add	r1, pc, #4	@ (adr r1, 8004a3c <_printf_i+0x40>)
 8004a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a3c:	08004a95 	.word	0x08004a95
 8004a40:	08004aa9 	.word	0x08004aa9
 8004a44:	08004a25 	.word	0x08004a25
 8004a48:	08004a25 	.word	0x08004a25
 8004a4c:	08004a25 	.word	0x08004a25
 8004a50:	08004a25 	.word	0x08004a25
 8004a54:	08004aa9 	.word	0x08004aa9
 8004a58:	08004a25 	.word	0x08004a25
 8004a5c:	08004a25 	.word	0x08004a25
 8004a60:	08004a25 	.word	0x08004a25
 8004a64:	08004a25 	.word	0x08004a25
 8004a68:	08004ba7 	.word	0x08004ba7
 8004a6c:	08004ad3 	.word	0x08004ad3
 8004a70:	08004b61 	.word	0x08004b61
 8004a74:	08004a25 	.word	0x08004a25
 8004a78:	08004a25 	.word	0x08004a25
 8004a7c:	08004bc9 	.word	0x08004bc9
 8004a80:	08004a25 	.word	0x08004a25
 8004a84:	08004ad3 	.word	0x08004ad3
 8004a88:	08004a25 	.word	0x08004a25
 8004a8c:	08004a25 	.word	0x08004a25
 8004a90:	08004b69 	.word	0x08004b69
 8004a94:	6833      	ldr	r3, [r6, #0]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6032      	str	r2, [r6, #0]
 8004a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e09c      	b.n	8004be2 <_printf_i+0x1e6>
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	6031      	str	r1, [r6, #0]
 8004ab0:	0606      	lsls	r6, r0, #24
 8004ab2:	d501      	bpl.n	8004ab8 <_printf_i+0xbc>
 8004ab4:	681d      	ldr	r5, [r3, #0]
 8004ab6:	e003      	b.n	8004ac0 <_printf_i+0xc4>
 8004ab8:	0645      	lsls	r5, r0, #25
 8004aba:	d5fb      	bpl.n	8004ab4 <_printf_i+0xb8>
 8004abc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	da03      	bge.n	8004acc <_printf_i+0xd0>
 8004ac4:	232d      	movs	r3, #45	@ 0x2d
 8004ac6:	426d      	negs	r5, r5
 8004ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004acc:	4858      	ldr	r0, [pc, #352]	@ (8004c30 <_printf_i+0x234>)
 8004ace:	230a      	movs	r3, #10
 8004ad0:	e011      	b.n	8004af6 <_printf_i+0xfa>
 8004ad2:	6821      	ldr	r1, [r4, #0]
 8004ad4:	6833      	ldr	r3, [r6, #0]
 8004ad6:	0608      	lsls	r0, r1, #24
 8004ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004adc:	d402      	bmi.n	8004ae4 <_printf_i+0xe8>
 8004ade:	0649      	lsls	r1, r1, #25
 8004ae0:	bf48      	it	mi
 8004ae2:	b2ad      	uxthmi	r5, r5
 8004ae4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ae6:	4852      	ldr	r0, [pc, #328]	@ (8004c30 <_printf_i+0x234>)
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	bf14      	ite	ne
 8004aec:	230a      	movne	r3, #10
 8004aee:	2308      	moveq	r3, #8
 8004af0:	2100      	movs	r1, #0
 8004af2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004af6:	6866      	ldr	r6, [r4, #4]
 8004af8:	60a6      	str	r6, [r4, #8]
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	db05      	blt.n	8004b0a <_printf_i+0x10e>
 8004afe:	6821      	ldr	r1, [r4, #0]
 8004b00:	432e      	orrs	r6, r5
 8004b02:	f021 0104 	bic.w	r1, r1, #4
 8004b06:	6021      	str	r1, [r4, #0]
 8004b08:	d04b      	beq.n	8004ba2 <_printf_i+0x1a6>
 8004b0a:	4616      	mov	r6, r2
 8004b0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b10:	fb03 5711 	mls	r7, r3, r1, r5
 8004b14:	5dc7      	ldrb	r7, [r0, r7]
 8004b16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b1a:	462f      	mov	r7, r5
 8004b1c:	42bb      	cmp	r3, r7
 8004b1e:	460d      	mov	r5, r1
 8004b20:	d9f4      	bls.n	8004b0c <_printf_i+0x110>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d10b      	bne.n	8004b3e <_printf_i+0x142>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	07df      	lsls	r7, r3, #31
 8004b2a:	d508      	bpl.n	8004b3e <_printf_i+0x142>
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	6861      	ldr	r1, [r4, #4]
 8004b30:	4299      	cmp	r1, r3
 8004b32:	bfde      	ittt	le
 8004b34:	2330      	movle	r3, #48	@ 0x30
 8004b36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b3e:	1b92      	subs	r2, r2, r6
 8004b40:	6122      	str	r2, [r4, #16]
 8004b42:	f8cd a000 	str.w	sl, [sp]
 8004b46:	464b      	mov	r3, r9
 8004b48:	aa03      	add	r2, sp, #12
 8004b4a:	4621      	mov	r1, r4
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	f7ff fee7 	bl	8004920 <_printf_common>
 8004b52:	3001      	adds	r0, #1
 8004b54:	d14a      	bne.n	8004bec <_printf_i+0x1f0>
 8004b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b5a:	b004      	add	sp, #16
 8004b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	f043 0320 	orr.w	r3, r3, #32
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	4832      	ldr	r0, [pc, #200]	@ (8004c34 <_printf_i+0x238>)
 8004b6a:	2778      	movs	r7, #120	@ 0x78
 8004b6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	6831      	ldr	r1, [r6, #0]
 8004b74:	061f      	lsls	r7, r3, #24
 8004b76:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b7a:	d402      	bmi.n	8004b82 <_printf_i+0x186>
 8004b7c:	065f      	lsls	r7, r3, #25
 8004b7e:	bf48      	it	mi
 8004b80:	b2ad      	uxthmi	r5, r5
 8004b82:	6031      	str	r1, [r6, #0]
 8004b84:	07d9      	lsls	r1, r3, #31
 8004b86:	bf44      	itt	mi
 8004b88:	f043 0320 	orrmi.w	r3, r3, #32
 8004b8c:	6023      	strmi	r3, [r4, #0]
 8004b8e:	b11d      	cbz	r5, 8004b98 <_printf_i+0x19c>
 8004b90:	2310      	movs	r3, #16
 8004b92:	e7ad      	b.n	8004af0 <_printf_i+0xf4>
 8004b94:	4826      	ldr	r0, [pc, #152]	@ (8004c30 <_printf_i+0x234>)
 8004b96:	e7e9      	b.n	8004b6c <_printf_i+0x170>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	e7f6      	b.n	8004b90 <_printf_i+0x194>
 8004ba2:	4616      	mov	r6, r2
 8004ba4:	e7bd      	b.n	8004b22 <_printf_i+0x126>
 8004ba6:	6833      	ldr	r3, [r6, #0]
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	6961      	ldr	r1, [r4, #20]
 8004bac:	1d18      	adds	r0, r3, #4
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	062e      	lsls	r6, r5, #24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	d501      	bpl.n	8004bba <_printf_i+0x1be>
 8004bb6:	6019      	str	r1, [r3, #0]
 8004bb8:	e002      	b.n	8004bc0 <_printf_i+0x1c4>
 8004bba:	0668      	lsls	r0, r5, #25
 8004bbc:	d5fb      	bpl.n	8004bb6 <_printf_i+0x1ba>
 8004bbe:	8019      	strh	r1, [r3, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6123      	str	r3, [r4, #16]
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	e7bc      	b.n	8004b42 <_printf_i+0x146>
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	1d1a      	adds	r2, r3, #4
 8004bcc:	6032      	str	r2, [r6, #0]
 8004bce:	681e      	ldr	r6, [r3, #0]
 8004bd0:	6862      	ldr	r2, [r4, #4]
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7fb fb9b 	bl	8000310 <memchr>
 8004bda:	b108      	cbz	r0, 8004be0 <_printf_i+0x1e4>
 8004bdc:	1b80      	subs	r0, r0, r6
 8004bde:	6060      	str	r0, [r4, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	2300      	movs	r3, #0
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bea:	e7aa      	b.n	8004b42 <_printf_i+0x146>
 8004bec:	6923      	ldr	r3, [r4, #16]
 8004bee:	4632      	mov	r2, r6
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	47d0      	blx	sl
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0ad      	beq.n	8004b56 <_printf_i+0x15a>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d413      	bmi.n	8004c28 <_printf_i+0x22c>
 8004c00:	68e0      	ldr	r0, [r4, #12]
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	4298      	cmp	r0, r3
 8004c06:	bfb8      	it	lt
 8004c08:	4618      	movlt	r0, r3
 8004c0a:	e7a6      	b.n	8004b5a <_printf_i+0x15e>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4649      	mov	r1, r9
 8004c12:	4640      	mov	r0, r8
 8004c14:	47d0      	blx	sl
 8004c16:	3001      	adds	r0, #1
 8004c18:	d09d      	beq.n	8004b56 <_printf_i+0x15a>
 8004c1a:	3501      	adds	r5, #1
 8004c1c:	68e3      	ldr	r3, [r4, #12]
 8004c1e:	9903      	ldr	r1, [sp, #12]
 8004c20:	1a5b      	subs	r3, r3, r1
 8004c22:	42ab      	cmp	r3, r5
 8004c24:	dcf2      	bgt.n	8004c0c <_printf_i+0x210>
 8004c26:	e7eb      	b.n	8004c00 <_printf_i+0x204>
 8004c28:	2500      	movs	r5, #0
 8004c2a:	f104 0619 	add.w	r6, r4, #25
 8004c2e:	e7f5      	b.n	8004c1c <_printf_i+0x220>
 8004c30:	08005059 	.word	0x08005059
 8004c34:	0800506a 	.word	0x0800506a

08004c38 <__sflush_r>:
 8004c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c40:	0716      	lsls	r6, r2, #28
 8004c42:	4605      	mov	r5, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	d454      	bmi.n	8004cf2 <__sflush_r+0xba>
 8004c48:	684b      	ldr	r3, [r1, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dc02      	bgt.n	8004c54 <__sflush_r+0x1c>
 8004c4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dd48      	ble.n	8004ce6 <__sflush_r+0xae>
 8004c54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d045      	beq.n	8004ce6 <__sflush_r+0xae>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c60:	682f      	ldr	r7, [r5, #0]
 8004c62:	6a21      	ldr	r1, [r4, #32]
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	d030      	beq.n	8004cca <__sflush_r+0x92>
 8004c68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c6a:	89a3      	ldrh	r3, [r4, #12]
 8004c6c:	0759      	lsls	r1, r3, #29
 8004c6e:	d505      	bpl.n	8004c7c <__sflush_r+0x44>
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c76:	b10b      	cbz	r3, 8004c7c <__sflush_r+0x44>
 8004c78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c7a:	1ad2      	subs	r2, r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b0      	blx	r6
 8004c86:	1c43      	adds	r3, r0, #1
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	d106      	bne.n	8004c9a <__sflush_r+0x62>
 8004c8c:	6829      	ldr	r1, [r5, #0]
 8004c8e:	291d      	cmp	r1, #29
 8004c90:	d82b      	bhi.n	8004cea <__sflush_r+0xb2>
 8004c92:	4a2a      	ldr	r2, [pc, #168]	@ (8004d3c <__sflush_r+0x104>)
 8004c94:	40ca      	lsrs	r2, r1
 8004c96:	07d6      	lsls	r6, r2, #31
 8004c98:	d527      	bpl.n	8004cea <__sflush_r+0xb2>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	6062      	str	r2, [r4, #4]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	6022      	str	r2, [r4, #0]
 8004ca4:	d504      	bpl.n	8004cb0 <__sflush_r+0x78>
 8004ca6:	1c42      	adds	r2, r0, #1
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0x76>
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	b903      	cbnz	r3, 8004cb0 <__sflush_r+0x78>
 8004cae:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cb2:	602f      	str	r7, [r5, #0]
 8004cb4:	b1b9      	cbz	r1, 8004ce6 <__sflush_r+0xae>
 8004cb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	d002      	beq.n	8004cc4 <__sflush_r+0x8c>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7ff fbf4 	bl	80044ac <_free_r>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cc8:	e00d      	b.n	8004ce6 <__sflush_r+0xae>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b0      	blx	r6
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	1c50      	adds	r0, r2, #1
 8004cd4:	d1c9      	bne.n	8004c6a <__sflush_r+0x32>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0c6      	beq.n	8004c6a <__sflush_r+0x32>
 8004cdc:	2b1d      	cmp	r3, #29
 8004cde:	d001      	beq.n	8004ce4 <__sflush_r+0xac>
 8004ce0:	2b16      	cmp	r3, #22
 8004ce2:	d11e      	bne.n	8004d22 <__sflush_r+0xea>
 8004ce4:	602f      	str	r7, [r5, #0]
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	e022      	b.n	8004d30 <__sflush_r+0xf8>
 8004cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	e01b      	b.n	8004d2a <__sflush_r+0xf2>
 8004cf2:	690f      	ldr	r7, [r1, #16]
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	d0f6      	beq.n	8004ce6 <__sflush_r+0xae>
 8004cf8:	0793      	lsls	r3, r2, #30
 8004cfa:	680e      	ldr	r6, [r1, #0]
 8004cfc:	bf08      	it	eq
 8004cfe:	694b      	ldreq	r3, [r1, #20]
 8004d00:	600f      	str	r7, [r1, #0]
 8004d02:	bf18      	it	ne
 8004d04:	2300      	movne	r3, #0
 8004d06:	eba6 0807 	sub.w	r8, r6, r7
 8004d0a:	608b      	str	r3, [r1, #8]
 8004d0c:	f1b8 0f00 	cmp.w	r8, #0
 8004d10:	dde9      	ble.n	8004ce6 <__sflush_r+0xae>
 8004d12:	6a21      	ldr	r1, [r4, #32]
 8004d14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d16:	4643      	mov	r3, r8
 8004d18:	463a      	mov	r2, r7
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b0      	blx	r6
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	dc08      	bgt.n	8004d34 <__sflush_r+0xfc>
 8004d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d34:	4407      	add	r7, r0
 8004d36:	eba8 0800 	sub.w	r8, r8, r0
 8004d3a:	e7e7      	b.n	8004d0c <__sflush_r+0xd4>
 8004d3c:	20400001 	.word	0x20400001

08004d40 <_fflush_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4605      	mov	r5, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	b913      	cbnz	r3, 8004d50 <_fflush_r+0x10>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	b118      	cbz	r0, 8004d5a <_fflush_r+0x1a>
 8004d52:	6a03      	ldr	r3, [r0, #32]
 8004d54:	b90b      	cbnz	r3, 8004d5a <_fflush_r+0x1a>
 8004d56:	f7ff faa1 	bl	800429c <__sinit>
 8004d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f3      	beq.n	8004d4a <_fflush_r+0xa>
 8004d62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d64:	07d0      	lsls	r0, r2, #31
 8004d66:	d404      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d68:	0599      	lsls	r1, r3, #22
 8004d6a:	d402      	bmi.n	8004d72 <_fflush_r+0x32>
 8004d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d6e:	f7ff fb9a 	bl	80044a6 <__retarget_lock_acquire_recursive>
 8004d72:	4628      	mov	r0, r5
 8004d74:	4621      	mov	r1, r4
 8004d76:	f7ff ff5f 	bl	8004c38 <__sflush_r>
 8004d7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d7c:	07da      	lsls	r2, r3, #31
 8004d7e:	4605      	mov	r5, r0
 8004d80:	d4e4      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d4e1      	bmi.n	8004d4c <_fflush_r+0xc>
 8004d88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d8a:	f7ff fb8d 	bl	80044a8 <__retarget_lock_release_recursive>
 8004d8e:	e7dd      	b.n	8004d4c <_fflush_r+0xc>

08004d90 <__swbuf_r>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	460e      	mov	r6, r1
 8004d94:	4614      	mov	r4, r2
 8004d96:	4605      	mov	r5, r0
 8004d98:	b118      	cbz	r0, 8004da2 <__swbuf_r+0x12>
 8004d9a:	6a03      	ldr	r3, [r0, #32]
 8004d9c:	b90b      	cbnz	r3, 8004da2 <__swbuf_r+0x12>
 8004d9e:	f7ff fa7d 	bl	800429c <__sinit>
 8004da2:	69a3      	ldr	r3, [r4, #24]
 8004da4:	60a3      	str	r3, [r4, #8]
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	071a      	lsls	r2, r3, #28
 8004daa:	d501      	bpl.n	8004db0 <__swbuf_r+0x20>
 8004dac:	6923      	ldr	r3, [r4, #16]
 8004dae:	b943      	cbnz	r3, 8004dc2 <__swbuf_r+0x32>
 8004db0:	4621      	mov	r1, r4
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 f82a 	bl	8004e0c <__swsetup_r>
 8004db8:	b118      	cbz	r0, 8004dc2 <__swbuf_r+0x32>
 8004dba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	1a98      	subs	r0, r3, r2
 8004dc8:	6963      	ldr	r3, [r4, #20]
 8004dca:	b2f6      	uxtb	r6, r6
 8004dcc:	4283      	cmp	r3, r0
 8004dce:	4637      	mov	r7, r6
 8004dd0:	dc05      	bgt.n	8004dde <__swbuf_r+0x4e>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f7ff ffb3 	bl	8004d40 <_fflush_r>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d1ed      	bne.n	8004dba <__swbuf_r+0x2a>
 8004dde:	68a3      	ldr	r3, [r4, #8]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	60a3      	str	r3, [r4, #8]
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	6022      	str	r2, [r4, #0]
 8004dea:	701e      	strb	r6, [r3, #0]
 8004dec:	6962      	ldr	r2, [r4, #20]
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d004      	beq.n	8004dfe <__swbuf_r+0x6e>
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	07db      	lsls	r3, r3, #31
 8004df8:	d5e1      	bpl.n	8004dbe <__swbuf_r+0x2e>
 8004dfa:	2e0a      	cmp	r6, #10
 8004dfc:	d1df      	bne.n	8004dbe <__swbuf_r+0x2e>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4628      	mov	r0, r5
 8004e02:	f7ff ff9d 	bl	8004d40 <_fflush_r>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d0d9      	beq.n	8004dbe <__swbuf_r+0x2e>
 8004e0a:	e7d6      	b.n	8004dba <__swbuf_r+0x2a>

08004e0c <__swsetup_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <__swsetup_r+0xa8>)
 8004e10:	4605      	mov	r5, r0
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	460c      	mov	r4, r1
 8004e16:	b118      	cbz	r0, 8004e20 <__swsetup_r+0x14>
 8004e18:	6a03      	ldr	r3, [r0, #32]
 8004e1a:	b90b      	cbnz	r3, 8004e20 <__swsetup_r+0x14>
 8004e1c:	f7ff fa3e 	bl	800429c <__sinit>
 8004e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e24:	0719      	lsls	r1, r3, #28
 8004e26:	d422      	bmi.n	8004e6e <__swsetup_r+0x62>
 8004e28:	06da      	lsls	r2, r3, #27
 8004e2a:	d407      	bmi.n	8004e3c <__swsetup_r+0x30>
 8004e2c:	2209      	movs	r2, #9
 8004e2e:	602a      	str	r2, [r5, #0]
 8004e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e3a:	e033      	b.n	8004ea4 <__swsetup_r+0x98>
 8004e3c:	0758      	lsls	r0, r3, #29
 8004e3e:	d512      	bpl.n	8004e66 <__swsetup_r+0x5a>
 8004e40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e42:	b141      	cbz	r1, 8004e56 <__swsetup_r+0x4a>
 8004e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	d002      	beq.n	8004e52 <__swsetup_r+0x46>
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f7ff fb2d 	bl	80044ac <_free_r>
 8004e52:	2300      	movs	r3, #0
 8004e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6063      	str	r3, [r4, #4]
 8004e62:	6923      	ldr	r3, [r4, #16]
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	89a3      	ldrh	r3, [r4, #12]
 8004e68:	f043 0308 	orr.w	r3, r3, #8
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	b94b      	cbnz	r3, 8004e86 <__swsetup_r+0x7a>
 8004e72:	89a3      	ldrh	r3, [r4, #12]
 8004e74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7c:	d003      	beq.n	8004e86 <__swsetup_r+0x7a>
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 f84f 	bl	8004f24 <__smakebuf_r>
 8004e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8a:	f013 0201 	ands.w	r2, r3, #1
 8004e8e:	d00a      	beq.n	8004ea6 <__swsetup_r+0x9a>
 8004e90:	2200      	movs	r2, #0
 8004e92:	60a2      	str	r2, [r4, #8]
 8004e94:	6962      	ldr	r2, [r4, #20]
 8004e96:	4252      	negs	r2, r2
 8004e98:	61a2      	str	r2, [r4, #24]
 8004e9a:	6922      	ldr	r2, [r4, #16]
 8004e9c:	b942      	cbnz	r2, 8004eb0 <__swsetup_r+0xa4>
 8004e9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004ea2:	d1c5      	bne.n	8004e30 <__swsetup_r+0x24>
 8004ea4:	bd38      	pop	{r3, r4, r5, pc}
 8004ea6:	0799      	lsls	r1, r3, #30
 8004ea8:	bf58      	it	pl
 8004eaa:	6962      	ldrpl	r2, [r4, #20]
 8004eac:	60a2      	str	r2, [r4, #8]
 8004eae:	e7f4      	b.n	8004e9a <__swsetup_r+0x8e>
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7f7      	b.n	8004ea4 <__swsetup_r+0x98>
 8004eb4:	24000038 	.word	0x24000038

08004eb8 <_sbrk_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d06      	ldr	r5, [pc, #24]	@ (8004ed4 <_sbrk_r+0x1c>)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	f7fb fdfc 	bl	8000ac0 <_sbrk>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_sbrk_r+0x1a>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_sbrk_r+0x1a>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	2400029c 	.word	0x2400029c

08004ed8 <__swhatbuf_r>:
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	460c      	mov	r4, r1
 8004edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	b096      	sub	sp, #88	@ 0x58
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	461e      	mov	r6, r3
 8004ee8:	da0d      	bge.n	8004f06 <__swhatbuf_r+0x2e>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	bf14      	ite	ne
 8004ef6:	2340      	movne	r3, #64	@ 0x40
 8004ef8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004efc:	2000      	movs	r0, #0
 8004efe:	6031      	str	r1, [r6, #0]
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	b016      	add	sp, #88	@ 0x58
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	466a      	mov	r2, sp
 8004f08:	f000 f848 	bl	8004f9c <_fstat_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	dbec      	blt.n	8004eea <__swhatbuf_r+0x12>
 8004f10:	9901      	ldr	r1, [sp, #4]
 8004f12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f1a:	4259      	negs	r1, r3
 8004f1c:	4159      	adcs	r1, r3
 8004f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f22:	e7eb      	b.n	8004efc <__swhatbuf_r+0x24>

08004f24 <__smakebuf_r>:
 8004f24:	898b      	ldrh	r3, [r1, #12]
 8004f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f28:	079d      	lsls	r5, r3, #30
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	d507      	bpl.n	8004f40 <__smakebuf_r+0x1c>
 8004f30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	6123      	str	r3, [r4, #16]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	6163      	str	r3, [r4, #20]
 8004f3c:	b003      	add	sp, #12
 8004f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f40:	ab01      	add	r3, sp, #4
 8004f42:	466a      	mov	r2, sp
 8004f44:	f7ff ffc8 	bl	8004ed8 <__swhatbuf_r>
 8004f48:	9f00      	ldr	r7, [sp, #0]
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f7ff fb18 	bl	8004584 <_malloc_r>
 8004f54:	b948      	cbnz	r0, 8004f6a <__smakebuf_r+0x46>
 8004f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5a:	059a      	lsls	r2, r3, #22
 8004f5c:	d4ee      	bmi.n	8004f3c <__smakebuf_r+0x18>
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	f043 0302 	orr.w	r3, r3, #2
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	e7e2      	b.n	8004f30 <__smakebuf_r+0xc>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	6020      	str	r0, [r4, #0]
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f72:	81a3      	strh	r3, [r4, #12]
 8004f74:	9b01      	ldr	r3, [sp, #4]
 8004f76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f7a:	b15b      	cbz	r3, 8004f94 <__smakebuf_r+0x70>
 8004f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f80:	4630      	mov	r0, r6
 8004f82:	f000 f81d 	bl	8004fc0 <_isatty_r>
 8004f86:	b128      	cbz	r0, 8004f94 <__smakebuf_r+0x70>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	431d      	orrs	r5, r3
 8004f98:	81a5      	strh	r5, [r4, #12]
 8004f9a:	e7cf      	b.n	8004f3c <__smakebuf_r+0x18>

08004f9c <_fstat_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d07      	ldr	r5, [pc, #28]	@ (8004fbc <_fstat_r+0x20>)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4604      	mov	r4, r0
 8004fa4:	4608      	mov	r0, r1
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	f7fb fd60 	bl	8000a6e <_fstat>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	d102      	bne.n	8004fb8 <_fstat_r+0x1c>
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	b103      	cbz	r3, 8004fb8 <_fstat_r+0x1c>
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	bd38      	pop	{r3, r4, r5, pc}
 8004fba:	bf00      	nop
 8004fbc:	2400029c 	.word	0x2400029c

08004fc0 <_isatty_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4d06      	ldr	r5, [pc, #24]	@ (8004fdc <_isatty_r+0x1c>)
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	4608      	mov	r0, r1
 8004fca:	602b      	str	r3, [r5, #0]
 8004fcc:	f7fb fd5f 	bl	8000a8e <_isatty>
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d102      	bne.n	8004fda <_isatty_r+0x1a>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	b103      	cbz	r3, 8004fda <_isatty_r+0x1a>
 8004fd8:	6023      	str	r3, [r4, #0]
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	2400029c 	.word	0x2400029c

08004fe0 <_init>:
 8004fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe2:	bf00      	nop
 8004fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe6:	bc08      	pop	{r3}
 8004fe8:	469e      	mov	lr, r3
 8004fea:	4770      	bx	lr

08004fec <_fini>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr
